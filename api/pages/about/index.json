{"title":"about","type":"page","uid":"03933793d01427bd4ef056d0a9b02560","text":"Who am I Hello! I am kiyose, a developer dedicated to exploring C++ knowledge, and in my spare time, I am passionate ❤️ about learning new te...","date":"2024-05-16T04:15:58.000Z","updated":"2024-05-17T05:53:47.522Z","comments":true,"path":"api/pages/about/index.json","covers":null,"excerpt":"","content":"<h1>Who am I</h1>\n<p>Hello! I am <em>kiyose</em>, a developer dedicated to exploring C++ knowledge, and in my spare time, I am passionate ❤️ about learning new technologies and exploring excellent open-source projects.</p>\n<p>Hello! 我是 <em>kiyose</em> ,一个钻研C++方面知识的开发者，空余时间热爱❤️学习新技术和了解优秀开源项目。</p>\n<h1>Skills &amp; Tools-技能 &amp; 工具</h1>\n<h2 id=\"技能\">技能</h2>\n<ul>\n<li>C++开发</li>\n<li>Qt开发</li>\n<li>后端开发（网络编程）</li>\n<li>云服务器部署</li>\n</ul>\n<h2 id=\"工具\">工具</h2>\n<ul>\n<li>VS</li>\n<li>VSCode</li>\n<li>Qt Creater</li>\n<li>Git</li>\n<li>VM</li>\n<li>Xshell</li>\n<li>MySQL</li>\n</ul>\n<h1>经验</h1>\n<h2 id=\"编程经验\">编程经验</h2>\n<ul>\n<li>熟悉C++编程，熟练运用STL库进行高效数据结构与算法实现。深入理解C++11标准，包括智能指针（unique_ptr, shared_ptr等）以管理内存，以及lambda表达式提升代码灵活性和表达力。熟悉Linux环境下的开发与调试。</li>\n<li>理解TCP/IP协议栈，能够设计并实现稳定高效的网络通信模块。</li>\n<li>在Linux平台上，擅长运用共享内存进行进程间高效通信，通过互斥锁（mutex）和条件变量（condition variable）解决并发访问问题，确保数据一致性与程序的线程安全。对Completely Fair Scheduler (CFS)有深入理解，能够分析并优化进程调度策略，提升系统整体性能。</li>\n<li>引入使用过Redis作为高速缓存数据库，并设计实现了一套基于线程池的并发处理机制</li>\n</ul>\n<h1>自我推荐（吹牛）</h1>\n<h2 id=\"Qt\">Qt</h2>\n<p><strong>Qt框架应用</strong></p>\n<ul>\n<li><strong>跨平台界面开发</strong>：在多个项目中，使用Qt Creator IDE高效地设计并实现了一套跨平台（Windows、macOS、Linux）的图形用户界面（GUI）应用程序。通过QWidgets和Qt Quick/QML技术，创建了响应式、用户友好的界面，同时利用Qt Designer工具快速原型设计，显著缩短了UI迭代周期。</li>\n<li><strong>信号与槽机制</strong>：深入掌握Qt的核心——信号与槽机制，用于实现对象之间的解耦通信。通过自定义信号槽，优化了应用程序内部的事件处理逻辑，提升了代码的模块化和可维护性。</li>\n<li><strong>网络编程与QtWebEngine</strong>：利用Qt的网络模块(QNetworkAccessManager等)，开发了一个支持HTTP/HTTPS协议的文件下载管理器，实现了断点续传、多线程下载等功能。另外，集成QtWebEngine构建嵌入式浏览器组件，为应用程序添加了网页浏览和网页内容交互的能力。</li>\n</ul>\n<p>通过这些实践经验，我不仅掌握了Qt框架在跨平台GUI开发和网络编程中的应用技巧，</p>\n<h2 id=\"redis\">redis</h2>\n<p><strong>服务端Redis与线程池优化</strong></p>\n<p>在某大型在线服务平台的后端系统开发中，我负责优化服务端性能，特别是针对高频次、低延迟数据访问的需求。为了显著提高应用处理能力，我引入了Redis作为高速缓存数据库，并设计实现了一套基于线程池的并发处理机制，具体操作如下：</p>\n<ul>\n<li>\n<p><strong>Redis缓存策略制定</strong>：首先，深入分析了系统中的数据访问模式，识别出热点数据集。随后，利用Redis的高速读写能力，将这些数据存储至内存中，通过设置合理的缓存过期策略（如TTL）来保持数据新鲜度，有效减轻了数据库的负担，提升了数据读取速度。</p>\n</li>\n<li>\n<p><strong>线程池设计与实现</strong>：鉴于传统的线性请求处理方式难以满足高并发需求，我设计并实现了一个灵活的线程池。该线程池基于C++11的<code>std::thread</code>和<code>std::async</code>，结合互斥锁、条件变量等同步机制，确保了任务的高效分配与执行。线程池动态调整线程数量，既充分利用了系统资源，又避免了过多线程导致的上下文切换开销。</p>\n</li>\n<li>\n<p><strong>Redis与线程池集成</strong>：为了进一步提升效率，我确保线程池中的每个工作线程都能高效地与Redis交互。利用Redis的批量操作命令（如<code>MGET</code>, <code>MSET</code>）减少网络往返次数，以及pipelining技术，将多个命令一次性发送至Redis，待所有命令执行完毕后再接收响应，极大提升了数据访问速度。</p>\n</li>\n<li>\n<p><strong>监控与调优</strong>：实施了全面的监控体系，跟踪线程池的工作状态（活跃线程数、任务队列长度等）及Redis的性能指标（如命中率、延迟）。通过持续分析监控数据，对线程池大小、Redis缓存策略进行了多次微调，最终达成了系统资源的最佳利用与性能最大化。</p>\n</li>\n</ul>\n<p>通过以上措施，服务端处理能力得到显著增强，平均请求响应时间降低了近40%，即使在高峰期也能保持良好的服务稳定性与用户体验。这一实践不仅展现了我在高性能服务端架构设计方面的深厚功底，也证明了我利用Redis和线程池技术解决实际问题的能力。</p>\n<h2 id=\"单例设计模式\">单例设计模式</h2>\n<p>在多个项目中，我广泛采用了设计模式中的<strong>单例模式</strong>（Singleton Pattern）来确保某些类的实例在全局范围内只存在一个，并提供一个全局访问点。以下是几个具体的使用案例，展示了如何有效地应用单例模式以提升代码的结构清晰度和资源管理效率：</p>\n<ol>\n<li>\n<p><strong>日志系统管理</strong>：设计了一个日志管理类作为单例，负责统一记录和管理应用程序运行时的日志信息。这样做的好处在于，无论在哪个模块中调用日志记录功能，都能够确保所有日志被集中处理，便于统一配置日志级别、输出格式以及存储路径，同时也避免了因重复实例化而导致的资源浪费。</p>\n</li>\n<li>\n<p><strong>配置管理器</strong>：在需要频繁读取配置文件的系统中，我实现了一个配置管理器单例类。这个单例负责加载配置文件到内存，并提供接口给其他模块获取配置信息。这样做不仅减少了对配置文件的重复读取，也保证了配置信息的一致性，避免了多线程环境下可能出现的配置冲突。</p>\n</li>\n<li>\n<p><strong>数据库连接池</strong>：在需要频繁与数据库交互的后台服务中，我利用单例模式设计了一个数据库连接池管理类。这个单例类负责维护一定数量的数据库连接，为应用程序提供获取和释放连接的方法。通过单例确保了连接池的唯一性，避免了因多个实例而造成的资源过度消耗和连接泄露问题，同时也简化了数据库操作的复杂度。</p>\n</li>\n<li>\n<p><strong>线程池管理</strong>：在构建需要大量并发处理的任务系统时，我实现了一个线程池管理的单例类。这个单例负责创建和管理一个固定大小的线程池，对外提供提交任务的接口。使用单例模式保证了所有任务都能通过同一入口提交到线程池中，便于控制线程的数量，防止资源滥用，同时简化了多线程编程的复杂性。</p>\n</li>\n</ol>\n<p>通过这些案例可以看出，单例模式在实践中极大地简化了对全局资源的管理，增强了代码的可维护性和可扩展性。在实现过程中，我遵循了懒汉式（Lazy Initialization）或饿汉式（Eager Initialization）的设计原则，确保了单例的线程安全，并在必要时采用了双重检查锁定（Double-Checked Locking）等技术来优化性能。</p>\n<p><strong>技能与经验强化</strong></p>\n<h2 id=\"网络编程\">网络编程</h2>\n<p><strong>并发编程与同步机制专家</strong></p>\n<ul>\n<li>\n<p><strong>并发设计模式精通者</strong>：深入理解并熟练应用Actor模型与CSP（Communicating Sequential Processes）设计模式，有效提升系统并发处理能力和模块间的解耦程度。在项目开发中，通过构建非阻塞的消息传递系统，利用Actor模型实现独立运行的处理单元，确保了高并发环境下的高效协作与故障隔离。同时，运用CSP思想设计管道和选择机制，促进组件间清晰的通信逻辑，增强系统的可伸缩性和可维护性。</p>\n</li>\n<li>\n<p><strong>线程同步与安全优化</strong>：擅长运用条件变量、栅栏（Barrier）等高级同步原语，构建高度线程安全的程序模块。通过精细设计条件变量，确保线程在等待特定条件满足时能够安全休眠与唤醒，有效避免了竞态条件，提高了多线程程序的正确性和执行效率。利用栅栏机制，精确控制多个线程的同步点，实现了复杂任务阶段间的无缝衔接，保证了协同工作的精确度和效率。</p>\n</li>\n<li>\n<p><strong>锁机制与数据结构实战</strong>：基于对锁原理的深刻理解，亲自设计并实现了一系列线程安全的数据结构，包括但不限于队列和栈容器。通过细粒度锁、读写锁等策略，最大限度减少了锁的竞争，从而提升了并发访问的吞吐量。在确保数据一致性的基础上，优化了多线程环境下的数据访问性能。</p>\n</li>\n<li>\n<p><strong>线程池技术领航者</strong>：精通线程池的设计原理与实现细节，有效管理线程生命周期，平衡系统负载，降低创建和销毁线程的开销。通过动态调整线程池大小、任务调度策略等机制，实现了资源的高效复用和任务的快速响应，显著提升了系统的响应速度和资源利用率。</p>\n</li>\n</ul>\n<p>通过上述技能的综合应用，我不仅提升了软件的并发处理能力，还确保了系统的稳定性和高效运行，展示了在并发编程领域的深厚功底与实战经验。</p>\n<p><strong>网络编程与并发技术</strong></p>\n<ul>\n<li>\n<p><strong>Boost.Asio专家</strong>：熟练运用Boost.Asio库进行高性能网络编程，不仅成功实现异步服务器，还针对网络I/O密集型应用设计了高效的多线程模型。通过精细的线程池管理和任务调度，显著提升了网络请求的并发处理能力，确保了服务的低延迟和高吞吐量。</p>\n</li>\n<li>\n<p><strong>高并发TCP服务器架构师</strong>：主导设计并搭建了基于Boost.Asio的高并发TCP服务器，通过优化连接处理逻辑、实现连接复用与负载均衡策略，有效应对了大规模并发连接的挑战，为实时通信、数据传输等场景提供了坚实的技术支撑。</p>\n</li>\n<li>\n<p><strong>全栈HTTP服务器开发</strong>：不仅利用Asio从零构建了功能完善的HTTP服务器，还进一步采用Beast网络库，深化了对HTTP协议的理解与应用。通过Beast，实现了详尽的HTTP请求解析、响应生成及高级特性支持，如Keep-Alive、压缩、HTTPS等，为Web服务提供了强大的基础设施。</p>\n</li>\n<li>\n<p><strong>WebSocket通讯解决方案</strong>：在实时数据交互和即时通讯领域，创新性地使用Beast库开发了WebSocket服务器，实现了双向通信功能。通过WebSocket协议，为前端应用与后端服务间建立了低延迟、高互动性的数据通道，适用于聊天应用、在线游戏、实时数据推送等多种应用场景。</p>\n</li>\n</ul>\n<p>通过这些实践经验，我不仅展示了在复杂网络编程领域的深厚功底，还证明了在提升系统并发处理能力、优化网络通信效率方面具有独到的见解和实施能力。无论是构建高性能的基础架构，还是实现前沿的网络应用，我都能够提供可靠的技术解决方案。</p>\n<p><strong>先进通讯与数据处理技术应用</strong></p>\n<ul>\n<li>\n<p><strong>gRPC框架集成专家</strong>：在项目核心模块中，我深度集成了gRPC（Google的高性能、开源通用RPC框架），设计并实现了高效、安全的微服务间通信。通过gRPC的protobuf接口定义语言，确保了接口的跨语言兼容性和高效的数据序列化，大幅提高了服务间通信的性能和可靠性。此外，我还利用其流式API支持，实现了实时数据传输与批量处理功能，为系统带来了更高的灵活性和扩展性。</p>\n</li>\n<li>\n<p><strong>C++ JSON处理能手</strong>：针对项目中的复杂数据交换需求，我选用了cppjson这一轻量级且高性能的C++ JSON库来解析和生成JSON数据。通过优化JSON解析算法与内存管理，显著提升了数据处理速度，尤其是在处理大数据量的JSON文档时，保证了应用的响应性和资源效率。我不仅实现了数据的快速读写，还设计了健壮的错误处理机制，增强了系统的稳定性和鲁棒性。</p>\n</li>\n</ul>\n<p>通过这些技术栈的综合运用，我在项目中不仅提升了数据交换的效率和安全性，还优化了整体系统的可维护性和扩展潜力，展现了在现代C++开发、尤其是高性能服务端开发方面的深厚专业技能和实战经验。</p>\n<h1>项目</h1>\n<h1>链接</h1>\n","count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Who am I</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Skills &amp; Tools-技能 &amp; 工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E8%83%BD\"><span class=\"toc-text\">技能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">工具</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">经验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C\"><span class=\"toc-text\">编程经验</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">自我推荐（吹牛）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Qt\"><span class=\"toc-text\">Qt</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis\"><span class=\"toc-text\">redis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">单例设计模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">网络编程</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">链接</span></a></li></ol>","data":[]}