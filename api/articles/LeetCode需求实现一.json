{"title":"LeetCode需求实现一","uid":"e79fdcc412b995815cc4152ea34468ff","slug":"LeetCode需求实现一","date":"2021-09-06T23:49:00.000Z","updated":"2024-06-03T03:50:06.241Z","comments":true,"path":"api/articles/LeetCode需求实现一.json","keywords":null,"cover":"img/lc.png","content":"<h1 id=\"实现初始化一个和已知vector大小相同的新的vector。\"><a href=\"#实现初始化一个和已知vector大小相同的新的vector。\" class=\"headerlink\" title=\"实现初始化一个和已知vector大小相同的新的vector。\"></a>实现初始化一个和已知vector大小相同的新的vector。</h1><p>在C++中，你可以使用构造函数来初始化一个和已知vector大小相同的新的vector。这里有一个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设你有一个vector</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; original_vector = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 你可以使用original_vector的size()方法来初始化一个新的相同大小的vector</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">new_vector</span><span class=\"params\">(original_vector.size())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在new_vector已经被初始化为和original_vector相同大小了</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这段代码首先定义了一个名为<code>original_vector</code>的vector，然后使用<code>original_vector.size()</code>的方法来初始化一个新的vector <code>new_vector</code>，使其大小与<code>original_vector</code>相同。</p></blockquote>\n<p>注意，这样做只是创建了一个大小相同但元素未初始化（默认初始化，对于基本类型如int，默认值通常是0）的新vector。如果你想要新vector的每个元素也和原vector相同，你需要用拷贝构造函数或赋值操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用拷贝构造函数</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">new_vector</span><span class=\"params\">(original_vector)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用赋值操作</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; new_vector;</span><br><span class=\"line\">new_vector = original_vector;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方式都会创建一个内容和<code>original_vector</code>完全相同的新vector。</p>\n<h1 id=\"将二维vector转化为一维vector\"><a href=\"#将二维vector转化为一维vector\" class=\"headerlink\" title=\"将二维vector转化为一维vector\"></a>将二维vector转化为一维vector</h1><p>将一个二维vector（<code>vector&lt;vector&lt;int&gt;&gt;</code>）转换为一维vector（<code>vector&lt;int&gt;</code>），可以通过遍历二维vector的每个元素并将它们逐一插入到新的一维vector中实现。下面是一个简单的示例代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">convert2DTo1D</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; twoDVector)</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; oneDVector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历二维vector的每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; row : twoDVector) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前行的所有元素添加到一维vector中</span></span><br><span class=\"line\">        oneDVector.<span class=\"built_in\">insert</span>(oneDVector.<span class=\"built_in\">end</span>(), row.<span class=\"built_in\">begin</span>(), row.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oneDVector;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; originalGrid = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; flattenedVector = <span class=\"built_in\">convert2DTo1D</span>(originalGrid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印转化后的一维vector</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : flattenedVector) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; num &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码定义了一个函数<code>convert2DTo1D</code>，它接收一个二维vector作为参数，并返回一个包含所有元素的一维vector。在<code>main</code>函数中，我们创建了一个二维vector <code>originalGrid</code>，然后调用<code>convert2DTo1D</code>函数将其转换为一维vector <code>flattenedVector</code>，最后打印出转换后的一维vector。</p>\n<h1 id=\"快速遍历一维vector数组\"><a href=\"#快速遍历一维vector数组\" class=\"headerlink\" title=\"快速遍历一维vector数组\"></a>快速遍历一维vector数组</h1><p>遍历一维vector数组（即普通的vector）在C++中非常直接，可以使用标准的循环或者C++11引入的范围for循环（range-based for loop）来完成。下面是两种方法的示例：</p>\n<h2 id=\"方法1-使用标准的for循环\"><a href=\"#方法1-使用标准的for循环\" class=\"headerlink\" title=\"方法1: 使用标准的for循环\"></a>方法1: 使用标准的for循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用迭代器遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(std::vector&lt;<span class=\"type\">int</span>&gt;::iterator it = vec.<span class=\"built_in\">begin</span>(); it != vec.<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用索引遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; vec[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法2-使用范围for循环-C-11及以上\"><a href=\"#方法2-使用范围for循环-C-11及以上\" class=\"headerlink\" title=\"方法2: 使用范围for循环 (C++11及以上)\"></a>方法2: 使用范围for循环 (C++11及以上)</h2><p>范围for循环提供了一种更简洁的方式来遍历容器中的元素，不需要显式管理迭代器或索引。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 范围for循环遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; elem : vec) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; elem &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>const auto&amp; elem</code>自动依次取vector中的每个元素，使得代码更加简洁且易于阅读。这是遍历一维vector数组的推荐方法，因为它既简单又安全。</p>\n<h1 id=\"实现快速遍历二维vector数组\"><a href=\"#实现快速遍历二维vector数组\" class=\"headerlink\" title=\"实现快速遍历二维vector数组\"></a>实现快速遍历二维vector数组</h1><p>在C++中，遍历二维vector（即vector的vector）可以通过嵌套循环来完成。下面是一个基本的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化一个二维vector</span></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; vec = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 双重循环遍历二维vector</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; vec[i].<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输出当前元素</span></span><br><span class=\"line\">            std::cout &lt;&lt; vec[i][j] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 换行，表示完成一行的打印</span></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码首先定义并初始化了一个二维的vector，然后通过两层循环遍历它：外层循环遍历vector的每一行，内层循环遍历每一行中的每个元素。这样就可以访问到二维vector中的每一个元素。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你对C++11及以后版本的范围基础语句熟悉，你也可以使用更简洁的for-each循环（range-based for loop）来遍历，但遍历二维数组时仍需要嵌套循环：</p></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; vec = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; row : vec) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; elem : row) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; elem &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式代码更为简洁，可读性更强。</p>\n","feature":false,"text":"本文是对于在Leetcode中需要进行快速实现的需求的基本实现方法的描述。...","permalink":"/post/LeetCode需求实现一","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/categories/LeetCode.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"},{"name":"vector","slug":"vector","count":2,"path":"api/tags/vector.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E5%92%8C%E5%B7%B2%E7%9F%A5vector%E5%A4%A7%E5%B0%8F%E7%9B%B8%E5%90%8C%E7%9A%84%E6%96%B0%E7%9A%84vector%E3%80%82\"><span class=\"toc-text\">实现初始化一个和已知vector大小相同的新的vector。</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B0%86%E4%BA%8C%E7%BB%B4vector%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%B8%80%E7%BB%B4vector\"><span class=\"toc-text\">将二维vector转化为一维vector</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E9%81%8D%E5%8E%86%E4%B8%80%E7%BB%B4vector%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">快速遍历一维vector数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%951-%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">方法1: 使用标准的for循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%952-%E4%BD%BF%E7%94%A8%E8%8C%83%E5%9B%B4for%E5%BE%AA%E7%8E%AF-C-11%E5%8F%8A%E4%BB%A5%E4%B8%8A\"><span class=\"toc-text\">方法2: 使用范围for循环 (C++11及以上)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4vector%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">实现快速遍历二维vector数组</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"类和对象","uid":"f7867369ce6c59c22c6335141c563f0b","slug":"类和对象_2","date":"2021-09-16T09:49:00.000Z","updated":"2024-05-21T12:47:39.700Z","comments":true,"path":"api/articles/类和对象_2.json","keywords":null,"cover":"img/c01.jpg","text":"深入C++面向对象核心概念，包括封装、继承、多态及类的设计，探讨构造函数、深浅拷贝、初始化列表等。...","permalink":"/post/类和对象_2","photos":[],"count_time":{"symbolsCount":"50k","symbolsTime":"45 mins."},"categories":[{"name":"C++高级","slug":"C-高级","count":9,"path":"api/categories/C-高级.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"构造函数","slug":"构造函数","count":2,"path":"api/tags/构造函数.json"},{"name":"面向对象","slug":"面向对象","count":1,"path":"api/tags/面向对象.json"},{"name":"类","slug":"类","count":1,"path":"api/tags/类.json"},{"name":"拷贝控制","slug":"拷贝控制","count":1,"path":"api/tags/拷贝控制.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null},"next_post":{"title":"函数提高","uid":"ae53cbdfb185be70e1c06b4739ffc47b","slug":"函数提高","date":"2021-08-31T23:49:00.000Z","updated":"2024-05-21T12:47:25.006Z","comments":true,"path":"api/articles/函数提高.json","keywords":null,"cover":"img/c01.jpg","text":"讲解函数默认参数、占位参数、重载、及多态基础，提升函数使用技巧。...","permalink":"/post/函数提高","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"C++高级","slug":"C-高级","count":9,"path":"api/categories/C-高级.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"函数","slug":"函数","count":2,"path":"api/tags/函数.json"},{"name":"默认参数","slug":"默认参数","count":1,"path":"api/tags/默认参数.json"},{"name":"重载","slug":"重载","count":1,"path":"api/tags/重载.json"},{"name":"多态","slug":"多态","count":1,"path":"api/tags/多态.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}