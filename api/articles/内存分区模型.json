{"title":"内存分区模型","uid":"bddeee4d46cae4292f5af8a8347e08fc","slug":"内存分区模型","date":"2021-07-31T03:49:00.000Z","updated":"2024-05-21T12:44:57.967Z","comments":true,"path":"api/articles/内存分区模型.json","keywords":null,"cover":"img/c01.jpg","content":"<h1>内存分区模型</h1>\n<p>C++程序在执行时，将内存大方向分为<strong>四个区域。</strong></p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理。</li>\n<li>全局区：存放全局变量和静态变量以及常量。</li>\n<li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li>\n<li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li>\n</ul>\n<p><strong>内存四区意义</strong>：<br>\n<strong>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。</strong></p>\n<h2 id=\"程序运行前\">程序运行前</h2>\n<p>在程序编译后，生成exe可执行程序，<strong>未执行该程序前</strong>分为两个区域。<br>\n<strong>代码区：</strong></p>\n<ul>\n<li>存放CPU执行的机器指令</li>\n<li>代码区时<strong>共享</strong>的，共享的目的时对于频繁被执行的程序，只需要在内存中有一份代码即可</li>\n<li>代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了他的指令</li>\n</ul>\n<p><strong>全局区：</strong></p>\n<ul>\n<li>全局变量和静态变量存放在此处</li>\n<li>全局区还包含了常量区，字符串常量和其他常量也存放在此</li>\n<li>==该区域的数据在程序结束后由操作系统释放==</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局变量  </span></span><br><span class=\"line\"><span class=\"type\">int</span> g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//const修饰的全局变量</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> c_g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> c_g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//全局区</span></span><br><span class=\"line\">\t<span class=\"comment\">//全局变量、静态变量、常量</span></span><br><span class=\"line\">\t<span class=\"comment\">//创建普通局部变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部变量a的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部变量b的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局变量g_a的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;g_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局变量g_b的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;g_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态变量\t在普通变量前添加static，属于静态变量</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> s_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> s_b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;静态变量s_a的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;s_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;静态变量s_b的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;s_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//常量</span></span><br><span class=\"line\">\t<span class=\"comment\">//字符串常量</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;字符串常量的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;<span class=\"string\">&quot;hello,world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局常量 c_g_a的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_g_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局常量 c_g_b的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_g_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的局部变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> c_l_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> c_l_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部常量 c_l_a的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_l_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部常量 c_l_b的地址为：&quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_l_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序运行后\">程序运行后</h2>\n<p><strong>栈区：</strong></p>\n<ul>\n<li>由编译器自动分配释放，存放函数的参数值，局部变量等</li>\n<li>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//栈区数据注意事项 --- 不要返回局部变量的地址</span></span><br><span class=\"line\"><span class=\"comment\">//栈区的数据由编译器管理开辟和释放</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> b)</span>\t<span class=\"comment\">//形参数据也会放在栈区</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//局部变量     存放在栈区，栈区的数据在函数执行完后自动释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;\t\t<span class=\"comment\">//返回局部变量的地址   </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接受func函数的返回值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//第一次可以答应正确的数字，是因为编译器做了保留</span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//第二次这数据就不再保留了（2022版本的vs做出改版，对返回值保留持续了）</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器编译时会提示不要返回局部变量或者临时变量的地址。一般会被释放产生问题（在2022VS中加入了更高的适配，对其做出了保留，但是不要如此使用）<br>\n<strong>堆区</strong></p>\n<ul>\n<li>由程序员分配释放，若是程序员不释放，程序结束时由操作做系统回收</li>\n<li>在C++中主要利用new在堆区开辟内存<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用new关键字可以将数据开辟到堆区</span></span><br><span class=\"line\">\t<span class=\"comment\">//指针 本质也是局部变量，放在栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* p=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在堆区开辟数据</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<ul>\n<li>堆区数据由程序员管理开辟和释放</li>\n<li>堆区数据利用new关键字进行开辟内存</li>\n</ul>\n<h2 id=\"new操作符\">new操作符</h2>\n<ul>\n<li>c++中利用new操作符在堆区开辟数据</li>\n<li>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete</li>\n<li>语法 ： new 数据类型</li>\n<li>利用new创建的数据，会返回该数据对应的类型的指针</li>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、new的基本语法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在堆区创建整型数据</span></span><br><span class=\"line\">\t<span class=\"comment\">//new返回的是   该数据类型的指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//堆区的数据  由程序员管理开辟，程序员管理释放</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果想释放堆区的数据，利用关键字 delete</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; *p &lt;&lt; endl;\t\t//内存已经释放，再次访问是非法操作，会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、在堆区利用new开辟一个数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建10整型数组，在堆区</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];\t\t<span class=\"comment\">//10代表数组有10个元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarr[i] = i + <span class=\"number\">100</span>; <span class=\"comment\">//给10个元素赋值 100~109</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//释放堆区的数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//释放数组的时候 要加【】才可以</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","feature":null,"text":"介绍C++程序内存四区划分，包括代码区、全局区、栈区、堆区的特点及访问权限。...","permalink":"/post/内存分区模型","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"C++高级","slug":"C-高级","count":7,"path":"api/categories/C-高级.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"内存管理","slug":"内存管理","count":3,"path":"api/tags/内存管理.json"},{"name":"分区模型","slug":"分区模型","count":3,"path":"api/tags/分区模型.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">内存分区模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%89%8D\"><span class=\"toc-text\">程序运行前</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%90%8E\"><span class=\"toc-text\">程序运行后</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">new操作符</span></a></li></ol></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"内存分区模型","uid":"bddeee4d46cae4292f5af8a8347e08fc","slug":"const修饰符修饰指针","date":"2021-08-03T03:49:00.000Z","updated":"2024-05-21T12:46:18.102Z","comments":true,"path":"api/articles/const修饰符修饰指针.json","keywords":null,"cover":"img/c01.jpg","text":"阐述const修饰指针与指针常量的区别，强调const在不同位置的意义。...","permalink":"/post/const修饰符修饰指针","photos":[],"count_time":{"symbolsCount":591,"symbolsTime":"1 mins."},"categories":[{"name":"C++高级","slug":"C-高级","count":7,"path":"api/categories/C-高级.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"内存管理","slug":"内存管理","count":3,"path":"api/tags/内存管理.json"},{"name":"分区模型","slug":"分区模型","count":3,"path":"api/tags/分区模型.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null},"next_post":{"title":"STL常用算法","uid":"c11341765c3dcde8916cd12b11e4e28c","slug":"STL常用算法","date":"2021-07-24T02:49:00.000Z","updated":"2024-05-21T12:44:30.598Z","comments":true,"path":"api/articles/STL常用算法.json","keywords":null,"cover":"img/STL.jpg","text":"深入浅出STL常用算法，涵盖遍历、查找、排序、集合操作等，结合实例代码讲解。...","permalink":"/post/STL常用算法","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"STL","slug":"STL","count":5,"path":"api/categories/STL.json"}],"tags":[{"name":"STL","slug":"STL","count":5,"path":"api/tags/STL.json"},{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"遍历","slug":"遍历","count":1,"path":"api/tags/遍历.json"},{"name":"查找","slug":"查找","count":1,"path":"api/tags/查找.json"},{"name":"排序","slug":"排序","count":1,"path":"api/tags/排序.json"},{"name":"集合算法","slug":"集合算法","count":1,"path":"api/tags/集合算法.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}