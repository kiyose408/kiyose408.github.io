{"title":"shared_ptr","uid":"a6d831861235c2eb17093e31fa78d0c7","slug":"shared_ptr","date":"2022-02-14T02:49:00.000Z","updated":"2024-05-23T07:20:46.310Z","comments":true,"path":"api/articles/shared_ptr.json","keywords":null,"cover":"img/point.png","content":"<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><p>C++提供了对指针操作的方法，当我们用new开辟指定类型的空间后，就生成了一个指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void use_pointer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //开辟整形指针，指向一个值为5的元素</span><br><span class=\"line\">    int *pint = new int(5);</span><br><span class=\"line\">    //开辟指向字符串的指针</span><br><span class=\"line\">    string *pstr = new string(&quot;hello zack&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过new + 类型构造的方式可以生成指针对象，但是开辟的指针对象所占用的空间在堆空间上。需要手动回收。 可以通过delete 指针对象的方式回收</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void use_pointer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //开辟整形指针，指向一个值为5的元素</span><br><span class=\"line\">    int *pint = new int(5);</span><br><span class=\"line\">    //开辟指向字符串的指针</span><br><span class=\"line\">    string *pstr = new string(&quot;hello zack&quot;);</span><br><span class=\"line\">    //释放pint指向的空间</span><br><span class=\"line\">    if (pint != nullptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delete pint;</span><br><span class=\"line\">        pint = nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //释放指针指向的空间。</span><br><span class=\"line\">    if (pstr != nullptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delete pstr;</span><br><span class=\"line\">        pstr = nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过delete 指针对象回收其指向的堆空间。为了防止double free，所以将释放后的对象分别置为nullptr。 指针存在很多隐患: 1 当一个函数返回局部变量的指针时，外部使用该指针可能会造成崩溃或逻辑错误。因为局部变量随着函数的右}释放了。 2 如果多个指针指向同一个堆空间，其中一个释放了堆空间，使用其他的指针时会造成崩溃。 3 对一个指针多次delete，会造成double free问题。 4 两个类对象A和B，分别包含对方类型的指针成员，互相引用时如何释放是个问题。</p>\n<p>所以C++提出了智能指针的用法，可以解决上述隐患。 shared_ptr允许多个指针指向同一个对象； unique_ptr则“独占”所指向的对象。 标准库还定义了一个名为weak_ptr的伴随类，它是一种弱引用，指向shared_ptr所管理的对象。 这三种类型都定义在memory头文件中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//我们定义一个指向整形5得指针</span><br><span class=\"line\">auto psint2 = make_shared&lt;int&gt;(5);</span><br><span class=\"line\">//判断智能指针是否为空</span><br><span class=\"line\">if (psint2 != nullptr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint2 is &quot; &lt;&lt; *psint2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">auto psstr2 = make_shared&lt;string&gt;(&quot;hello zack&quot;);</span><br><span class=\"line\">if (psstr2 != nullptr &amp;&amp; !psstr2-&gt;empty())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;psstr2 is &quot; &lt;&lt; *psstr2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于智能指针得使用和普通的内置指针没什么区别，通过判断指针是否为nullptr可以判断是否为空指针。 通过<code>-&gt;</code>可以取指针内部得成员方法或者成员变量。 make_shared函数将参数为对象类型的构造函数的参数，将此参数传递给模板中得对象类型的构造函数，从而构造出对象类型得智能指针，节省了对象在函数传递得开销。 当我们需要获取内置类型时，可以通过智能指针的方法get()返回其底层的内置指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *pint = psint2.get();</span><br><span class=\"line\">cout &lt;&lt; &quot;*pint  is &quot; &lt;&lt; *pint &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>不要手动回收智能指针get返回的内置指针，要交给智能指针自己回收即可，否则会造成double free或者 使用智能指针产生崩溃等问题。 也不要用get()返回得内置指针初始化另一个智能指针，因为两个智能指针引用一个内置指针会出现问题，比如一个释放了另一个不知道就会导致崩溃等问题。 shared_ptr会根据引用计数管理内置指针，当引用计数为0时就自动删除内置指针。 当将一个智能指针p赋值给另一个智能指针q时，p引用计数就-1，q引用计数就+1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void use_sharedptr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //我们定义一个指向整形5得指针</span><br><span class=\"line\">    auto psint2 = make_shared&lt;int&gt;(5);</span><br><span class=\"line\">    auto psstr2 = make_shared&lt;string&gt;(&quot;hello zack&quot;);</span><br><span class=\"line\">    //将psint2赋值给psint3,他们底层的内置指针相同</span><br><span class=\"line\">    // psint3和psint2引用计数相同，引用计数+1，都为2</span><br><span class=\"line\">    shared_ptr&lt;int&gt; psint3 = psint2;</span><br><span class=\"line\">    //打印引用计数</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint2 usecount is &quot; &lt;&lt; psint2.use_count() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint3 usecount is &quot; &lt;&lt; psint3.use_count() &lt;&lt; endl;</span><br><span class=\"line\">    // psint3引用计数为1</span><br><span class=\"line\">    psint3 = make_shared&lt;int&gt;(1024);</span><br><span class=\"line\">    // psint2引用计数-1，变为1</span><br><span class=\"line\">    //打印引用计数</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint2 usecount is &quot; &lt;&lt; psint2.use_count() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint3 usecount is &quot; &lt;&lt; psint3.use_count() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psint2 usecount is 2</span><br><span class=\"line\">psint3 usecount is 2</span><br><span class=\"line\">psint2 usecount is 1</span><br><span class=\"line\">psint3 usecount is 1</span><br></pre></td></tr></table></figure>\n\n<p>可以利用shared_ptr实现数据共享，我们定义一个StrBlob类，这个类仅又一个成员shared_ptr成员，用来管理vector,记录有多少个StrBlob类对象使用vector，当所有的StrBlob销毁时，vector自动回收。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class StrBlob</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    //定义类型</span><br><span class=\"line\">    typedef std::vector&lt;string&gt;::size_type size_type;</span><br><span class=\"line\">    StrBlob();</span><br><span class=\"line\">    //通过初始化列表构造</span><br><span class=\"line\">    StrBlob(const initializer_list&lt;string&gt; &amp;li);</span><br><span class=\"line\">    //返回vector大小</span><br><span class=\"line\">    size_type size() const &#123; return data-&gt;size(); &#125;</span><br><span class=\"line\">    //判断vector是否为空</span><br><span class=\"line\">    bool empty()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return data-&gt;empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //向vector写入元素</span><br><span class=\"line\">    void push_back(const string &amp;s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        data-&gt;push_back(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //从vector弹出元素</span><br><span class=\"line\">    void pop_back();</span><br><span class=\"line\">    //访问头元素</span><br><span class=\"line\">    std::string &amp;front();</span><br><span class=\"line\">    //访问尾元素</span><br><span class=\"line\">    std::string &amp;back();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>因为StrBlob未重载赋值运算符，也没有实现拷贝构造函数，所以StrBlob对象之间的赋值就是浅copy，因而内部成员data会随着StrBlob对象的赋值修改引用计数，默认情况下，当我们拷贝、赋值或销毁一个StrBlob对象时，它的shared_ptr成员会被拷贝、赋值或销毁。 当然我们也可以实现拷贝构造和赋值操作，让大家更好的理解智能指针随着类对象赋值等操作达到共享的效果。 运算符重载之后介绍，为了让程序更完善，这里给出拷贝构造和运算符重载的完整类声明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class StrBlob</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    //定义类型</span><br><span class=\"line\">    typedef std::vector&lt;string&gt;::size_type size_type;</span><br><span class=\"line\">    StrBlob();</span><br><span class=\"line\">    //通过初始化列表构造</span><br><span class=\"line\">    StrBlob(const initializer_list&lt;string&gt; &amp;li);</span><br><span class=\"line\">    //拷贝构造函数</span><br><span class=\"line\">    StrBlob(const StrBlob &amp;sb);</span><br><span class=\"line\">    StrBlob &amp;operator=(const StrBlob &amp;sb);</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回vector大小</span><br><span class=\"line\">    size_type size() const &#123; return data-&gt;size(); &#125;</span><br><span class=\"line\">    //判断vector是否为空</span><br><span class=\"line\">    bool empty()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return data-&gt;empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //向vector写入元素</span><br><span class=\"line\">    void push_back(const string &amp;s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        data-&gt;push_back(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //从vector弹出元素</span><br><span class=\"line\">    void pop_back();</span><br><span class=\"line\">    //访问头元素</span><br><span class=\"line\">    std::string &amp;front();</span><br><span class=\"line\">    //访问尾元素</span><br><span class=\"line\">    std::string &amp;back();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class=\"line\">    //检测i是否越界</span><br><span class=\"line\">    void check(size_type i, const string &amp;msg) const;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接下来实现三个构造函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StrBlob::StrBlob()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = make_shared&lt;vector&lt;string&gt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">StrBlob::StrBlob(const StrBlob &amp;sb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = sb.data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">StrBlob::StrBlob(const initializer_list&lt;string&gt; &amp;li)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = make_shared&lt;vector&lt;string&gt;&gt;(li);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认构造函数初始化data指向了一个空的vector，拷贝构造函数将sb的data赋值给自己，初始化列表方式的构造函数是用初始化列表构造data。接下来实现赋值运算符的重载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StrBlob &amp;StrBlob::operator=(const StrBlob &amp;sb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (&amp;sb != this)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this-&gt;data = sb.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return *this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将sb的data赋值给this-&gt;data，这样this-&gt;data和sb.data引用计数相同。 我们实现检查越界的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测i是否越界</span><br><span class=\"line\">void StrBlob::check(size_type i, const string &amp;msg) const</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (i &gt;= data-&gt;size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        throw out_of_range(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来实现front</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string &amp;StrBlob::front()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //不要返回局部变量的引用</span><br><span class=\"line\">    // if (data-&gt;size() &lt;= 0)</span><br><span class=\"line\">    // &#123;</span><br><span class=\"line\">    //     return string(&quot;&quot;);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    // 1 可以用一个局部变量返回异常情况</span><br><span class=\"line\">    if (data-&gt;size() &lt;= 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return badvalue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return data-&gt;front();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要考虑队列为空的情况，此时返回空字符串。但是如果我们直接构造一个空字符串返回，这样就返回了局部变量的引用，局部变量会随着函数结束而释放，造成安全隐患。所以我们可以返回类的成员变量badvalue，作为队列为空的标记。当然如果不能容忍队列为空的情况，可以通过抛出异常来处理，那我们用这种方式改写front</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string &amp;StrBlob::front()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    check(0, &quot;front on empty StrBlob&quot;);</span><br><span class=\"line\">    return data-&gt;front();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样我们实现back()和pop_back()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string &amp;StrBlob::back()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    check(0, &quot;back on empty StrBlog&quot;);</span><br><span class=\"line\">    return data-&gt;back();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void StrBlob::pop_back()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    check(0, &quot;back on pop_back StrBlog&quot;);</span><br><span class=\"line\">    data-&gt;pop_back();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们通过定义StrBlob类，达到共享vector的方式。多个StrBlob操作的是一个vector向量。 我们新增一个打印shared_ptr引用计数的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void StrBlob::printCount()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;shared_ptr use count is &quot; &lt;&lt; data.use_count() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面测试以下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void test_StrBlob()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    StrBlob strblob1(&#123;&quot;hello&quot;, &quot;zack&quot;, &quot;good luck&quot;&#125;);</span><br><span class=\"line\">    StrBlob strblob2;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        auto str2front = strblob2.front();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (std::out_of_range &amp;exc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; exc.what() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (...)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;unknown exception&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    strblob2 = strblob1;</span><br><span class=\"line\">    auto str1front = strblob1.front();</span><br><span class=\"line\">    cout &lt;&lt; &quot;strblob1 front is &quot; &lt;&lt; str1front &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    strblob2.printCount();</span><br><span class=\"line\">    strblob1.printCount();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">front on empty StrBlob</span><br><span class=\"line\">strblob1 front is hello</span><br><span class=\"line\">shared_ptr use count is 2</span><br><span class=\"line\">shared_ptr use count is 2</span><br></pre></td></tr></table></figure>\n\n<p>因为strblob2的队列为空，所以会抛出异常，当执行strblob2 &#x3D; strblob1之后，strblob2和strblob1的data的引用计数相同都为2。</p>\n<h2 id=\"shared-ptr和new结合\"><a href=\"#shared-ptr和new结合\" class=\"headerlink\" title=\"shared_ptr和new结合\"></a>shared_ptr和new结合</h2><p>之前的方式都是通过make_shared&lt;类型&gt;(构造函数列表参数)的方式构造的shared_ptr，也可以通过new 生成的内置指针初始化生成shared_ptr。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto psint = shared_ptr&lt;int&gt;(new int(5));</span><br><span class=\"line\">auto psstr = shared_ptr&lt;string&gt;(new string(&quot;hello zack&quot;));</span><br></pre></td></tr></table></figure>\n\n<p>接受指针参数的智能指针构造函数是explicit的。因此，我们不能将一个内置指针隐式转换为一个智能指针，必须使用直接初始化形式来初始化一个智能指针：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//错误，不能用内置指针隐式初始化shared_ptr</span><br><span class=\"line\">// shared_ptr&lt;int&gt; psint2 = new int(5);</span><br><span class=\"line\">//正确，显示初始化</span><br><span class=\"line\">shared_ptr&lt;string&gt; psstr2(new string(&quot;good luck&quot;));</span><br></pre></td></tr></table></figure>\n\n<p>除了智能指针之间的赋值，可以通过一个智能指针构造另一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared_ptr&lt;string&gt; psstr2(new string(&quot;good luck&quot;));</span><br><span class=\"line\">//可以通过一个shared_ptr 构造另一个shared_ptr</span><br><span class=\"line\">shared_ptr&lt;string&gt; psstr3(psstr2);</span><br><span class=\"line\">cout &lt;&lt; &quot;psstr2 use count is &quot; &lt;&lt; psstr2.use_count() &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; &quot;psstr3 use count is &quot; &lt;&lt; psstr3.use_count() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>程序输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psstr2 use count is 2</span><br><span class=\"line\">psstr3 use count is 2</span><br></pre></td></tr></table></figure>\n\n<p>通过一个指针构造另一个智能指针，两个指针共享底层内置指针，所以引用计数为2. 在构造智能指针的同时，可以指定自定义的删除方法替代shared_ptr自己的delete操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以设置新的删除函数替代delete</span><br><span class=\"line\">shared_ptr&lt;string&gt; psstr4(new string(&quot;good luck for zack&quot;), delfunc);</span><br></pre></td></tr></table></figure>\n\n<p>我们为psstr4指定了delfunc删除函数，这样当psstr4被释放时就会执行delfunc函数，而不是delete操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void delfunc(string *p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (p != nullptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delete (p);</span><br><span class=\"line\">        p = nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;self delete&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们实现了自己的delfunc函数作为删除器，回收了内置指针，并且打印了删除信息。这样当psstr4执行析构时，会打印”self delete”。 推荐使用make_shared的方式构造智能指针。 如果通过内置指针初始化生成智能指针，那一定要记住不要手动回收内置指针。 当将一个shared_ptr绑定到一个普通指针时，我们就将内存的管理责任交给了这个shared_ptr。 一旦这样做了，我们就不应该再使用内置指针来访问shared_ptr所指向的内存了。 以下代码存在问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void process(shared_ptr&lt;int&gt; psint)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;psint data is &quot; &lt;&lt; *psint &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int *p = new int(5);</span><br><span class=\"line\">    process(shared_ptr&lt;int&gt;(p));</span><br><span class=\"line\">    //危险，p已经被释放，会造成崩溃或者逻辑错误</span><br><span class=\"line\">    cout &lt;&lt; &quot;p data is &quot; &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psint data is 5</span><br><span class=\"line\">p data is 10569024</span><br></pre></td></tr></table></figure>\n\n<p>因为p构造为shared_ptr，那么它的回收就交给了shared_ptr，而shared_ptr是process的形参，形参在process运行结束会释放，那么p也被回收，之后再访问p会产生逻辑错误，所以打印了一个非法内存的数值。</p>\n<p>智能指针类型定义了一个名为get的函数，它返回一个内置指针，指向智能指针管理的对象。 此函数是为了这样一种情况而设计的：我们需要向不能使用智能指针的代码传递一个内置指针。 使用get返回的指针的代码不能delete此指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bad_use_sharedptr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shared_ptr&lt;int&gt; p(new int(5));</span><br><span class=\"line\">    //通过p获取内置指针q</span><br><span class=\"line\">    //注意q此时被p绑定，不要手动delete q</span><br><span class=\"line\">    int *q = p.get();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //两个独立的shared_ptr m和p都绑定q</span><br><span class=\"line\">        auto m = shared_ptr&lt;int&gt;(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //上述&#125;结束则m被回收，其绑定的q也被回收</span><br><span class=\"line\">    //此时使用q是非法操作，崩溃或者逻辑错误</span><br><span class=\"line\">    cout &lt;&lt; &quot;q data is &quot; &lt;&lt; *q &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码虽然没有手动delete q但是，两个独立的shared_ptr m和p都绑定了q，导致其中一个m被回收时q的内存也回收所以之后访问*q会出现崩溃或者数据异常。 注意，以下代码和上面是不同的，m和p此时共享q,并且引用计数是共享同步的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void good_use_sharedptr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shared_ptr&lt;int&gt; p(new int(5));</span><br><span class=\"line\">    //通过p获取内置指针q</span><br><span class=\"line\">    //注意q此时被p绑定，不要手动delete q</span><br><span class=\"line\">    int *q = p.get();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // m和p的引用计数都为2</span><br><span class=\"line\">        shared_ptr&lt;int&gt; m(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //上述&#125;结束则m被回收，其绑定的q也被回收</span><br><span class=\"line\">    //此时使用q是非法操作，崩溃或者逻辑错误</span><br><span class=\"line\">    cout &lt;&lt; &quot;q data is &quot; &lt;&lt; *q &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以总结以下： get用来将指针的访问权限传递给代码，你只有在确定代码不会delete指针的情况下，才能使用get。 特别是，永远不要用get初始化另一个智能指针或者为另一个智能指针赋值。</p>\n<h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h2><p>reset的功能是为shared_ptr重新开辟一块新的内存，让shared_ptr绑定这块内存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared_ptr&lt;int&gt; p(new int(5));</span><br><span class=\"line\">// p重新绑定新的内置指针</span><br><span class=\"line\">p.reset(new int(6));</span><br></pre></td></tr></table></figure>\n\n<p>上述代码为p重新绑定了新的内存空间。 reset常用的情况是判断智能指针是否独占内存，如果引用计数为1，也就是自己独占内存就去修改，否则就为智能指针绑定一块新的内存进行修改，防止多个智能指针共享一块内存，一个智能指针修改内存导致其他智能指针受影响。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果引用计数为1，unique返回true</span><br><span class=\"line\">if (!p.unique())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //还有其他人引用，所以我们为p指向新的内存</span><br><span class=\"line\">    p.reset(new int(6));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// p目前是唯一用户</span><br><span class=\"line\">*p = 1024;</span><br></pre></td></tr></table></figure>\n\n<p>使用智能指针的另一个好处，就是当程序一场崩溃时，智能指针也能保证内存空间被回收</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void execption_shared()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; p(new string(&quot;hello zack&quot;));</span><br><span class=\"line\">    //此处导致异常</span><br><span class=\"line\">    int m = 5 / 0;</span><br><span class=\"line\">    //即使崩溃也会保证p被回收</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>即使运行到 m &#x3D; 5 &#x2F; 0处，程序崩溃，智能指针p也会被回收。 有时候我们传递个智能指针的指针不是new分配的，那就需要我们自己给他传递一个删除器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void delfuncint(int *p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; *p &lt;&lt; &quot; in del func&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void delfunc_shared()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int p = 6;</span><br><span class=\"line\">    shared_ptr&lt;int&gt; psh(&amp;p, delfuncint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不传递delfuncint，会造成p被智能指针delete，因为p是栈空间的变量，用delete会导致崩溃。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>智能指针陷阱智能指针可以提供对动态分配的内存安全而又方便的管理，但这建立在正确使用的前提下。 为了正确使用智能指针，我们必须坚持一些基本规范： · 不使用相同的内置指针值初始化（或reset）多个智能指针。 · 不delete get（）返回的指针。 · 不使用get（）初始化或reset另一个智能指针。 · 如果你使用get（）返回的指针，记住当最后一个对应的智能指针销毁后，你的指针就变为无效了。 · 如果你使用智能指针管理的资源不是new分配的内存，记住传递给它一个删除器。</p>\n<p>源码连接 <a href=\"https://gitee.com/secondtonone1/cpplearn\">https://gitee.com/secondtonone1/cpplearn</a></p>\n","feature":null,"text":"C++提供了对指针操作的方法，当我们用new开辟指定类型的空间后，就生成了一个指针。...","permalink":"/post/shared_ptr","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"智能指针","slug":"智能指针","count":4,"path":"api/categories/智能指针.json"}],"tags":[{"name":"指针","slug":"指针","count":2,"path":"api/tags/指针.json"},{"name":"shared_ptr","slug":"shared-ptr","count":1,"path":"api/tags/shared-ptr.json"},{"name":"reset","slug":"reset","count":1,"path":"api/tags/reset.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#shared-ptr%E5%92%8Cnew%E7%BB%93%E5%90%88\"><span class=\"toc-text\">shared_ptr和new结合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reset\"><span class=\"toc-text\">reset</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"如何使用Gitbook搭建自己的笔记网站","uid":"414c4f40ff95d974f69d0698f4a5c5a7","slug":"如何使用Gitbook搭建自己的笔记网站","date":"2022-02-19T04:00:00.000Z","updated":"2024-06-03T03:50:25.008Z","comments":true,"path":"api/articles/如何使用Gitbook搭建自己的笔记网站.json","keywords":null,"cover":"img/web.jpg","text":"使用GitBook搭建自己的笔记网站或知识库可以分为几个基本步骤。...","permalink":"/post/如何使用Gitbook搭建自己的笔记网站","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"实用教程","slug":"实用教程","count":7,"path":"api/categories/实用教程.json"}],"tags":[{"name":"网站搭建","slug":"网站搭建","count":2,"path":"api/tags/网站搭建.json"},{"name":"实用教程","slug":"实用教程","count":2,"path":"api/tags/实用教程.json"},{"name":"Gitbook","slug":"Gitbook","count":1,"path":"api/tags/Gitbook.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":true},"next_post":{"title":"迭代器分类","uid":"e5cddefd1d930eb71bc590588a1288b4","slug":"迭代器分类","date":"2022-02-05T05:49:00.000Z","updated":"2024-05-31T01:31:10.540Z","comments":true,"path":"api/articles/迭代器分类.json","keywords":null,"cover":"img/fx.png","text":"除了容器自定义的迭代器之外，标准库还提供了其他几种迭代器，包括插入迭代器，流迭代器，反向迭代器，移动迭代器。...","permalink":"/post/迭代器分类","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"泛型用法","slug":"泛型用法","count":3,"path":"api/categories/泛型用法.json"}],"tags":[{"name":"迭代器","slug":"迭代器","count":2,"path":"api/tags/迭代器.json"},{"name":"插入迭代器","slug":"插入迭代器","count":1,"path":"api/tags/插入迭代器.json"},{"name":"方向迭代器","slug":"方向迭代器","count":1,"path":"api/tags/方向迭代器.json"},{"name":"iostream迭代器","slug":"iostream迭代器","count":1,"path":"api/tags/iostream迭代器.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}