{"title":"String类","uid":"d7215eab570338175fadc0dc91188274","slug":"C++的string类","date":"2021-05-03T04:15:58.000Z","updated":"2024-05-18T18:03:47.986Z","comments":true,"path":"api/articles/C++的string类.json","keywords":null,"cover":"img/C++.png","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>今天介绍string类的使用</p>\n<h1 id=\"初始化和定义\"><a href=\"#初始化和定义\" class=\"headerlink\" title=\"初始化和定义\"></a>初始化和定义</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认初始化,s1是一个空字符串</span></span><br><span class=\"line\">string s1;</span><br><span class=\"line\"><span class=\"comment\">//赋值初始化,s2是s1的副本</span></span><br><span class=\"line\">string s2 = s1;</span><br><span class=\"line\"><span class=\"comment\">//直接初始化 字面值初始化</span></span><br><span class=\"line\">string s3 = <span class=\"string\">&quot;hiya&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//直接初始化 构造函数初始化</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s4</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&#x27;c&#x27;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s5</span><span class=\"params\">(<span class=\"string\">&quot;hello zack&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"string操作\"><a href=\"#string操作\" class=\"headerlink\" title=\"string操作\"></a>string操作</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">opstr_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义空字符串</span></span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"comment\">//从输入流写入s</span></span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"comment\">//将s写入输出流</span></span><br><span class=\"line\">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//循环读取，直到遇到换行符或者非法输入</span></span><br><span class=\"line\">    string world;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; world)</span><br><span class=\"line\">        cout &lt;&lt; world &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//读取一整行</span></span><br><span class=\"line\">    string linestr;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(cin, linestr))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; linestr &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每次读入一整行，遇到空行跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(cin, linestr))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!linestr.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; linestr &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"comment\">//打印字符串长度</span></span><br><span class=\"line\">            cout &lt;&lt; linestr.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"comment\">// size()返回string::size_type类型的数据</span></span><br><span class=\"line\">            string::size_type size = linestr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 比较</span></span><br><span class=\"line\">    string str1 = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    string str2 = <span class=\"string\">&quot;Hello W&quot;</span>;</span><br><span class=\"line\">    string str3 = <span class=\"string\">&quot;Za&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//依次比较每个字符，字符大的字符串就大</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> b2 = str3 &gt; str1;</span><br><span class=\"line\">    cout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//前面字符相同，长度长的字符串大</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> b = str2 &gt; str1;</span><br><span class=\"line\">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>string 类重载了 比较运算符，也重载了+运算符等,所以string支持+运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// string类对象相加</span></span><br><span class=\"line\">string s1 = <span class=\"string\">&quot;Hello&quot;</span>, s2 = <span class=\"string\">&quot;Zack&quot;</span>;</span><br><span class=\"line\">string s3 = s1 + <span class=\"string\">&quot;,&quot;</span> + s2 + <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//加号两侧至少有一个是string类型，否则报错</span></span><br><span class=\"line\"><span class=\"comment\">// string s4 = &quot;Hello&quot; + &quot;Zack&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对C语言的兼容\"><a href=\"#对C语言的兼容\" class=\"headerlink\" title=\"对C语言的兼容\"></a>对C语言的兼容</h1><p>建议：使用C++版本的C标准库头文件 C++标准库中除了定义C++语言特有的功能外，也兼容了C语言的标准库。C语言的头文件形如name.h，C++则将这些文件命名为cname。也就是去掉了.h后缀，而在文件名name之前添加了字母c，这里的c表示这是一个属于C语言标准库的头文件。因此，cctype头文件和ctype.h头文件的内容是一样的，只不过从命名规范上来讲更符合C++语言的要求。特别的，在名为cname的头文件中定义的名字从属于命名空间std，而定义在名为.h的头文件中的则不然。一般来说，C++程序应该使用名为cname的头文件而不使用name.h的形式，标准库中的名字总能在命名空间std中找到。如果使用.h形式的头文件，程序员就不得不时刻牢记哪些是从C语言那儿继承过来的，哪些又是C++语言所独有的。</p>\n<h1 id=\"C11用法\"><a href=\"#C11用法\" class=\"headerlink\" title=\"C11用法\"></a>C11用法</h1><p>如果想对string对象中的每个字符做点儿什么操作，目前最好的办法是使用C++11新标准提供的一种语句：范围for（rangefor）语句。这种语句遍历给定序列中的每个元素并对序列中的每个值执行某种操作，其语法形式是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(declaration:expression)</span><br><span class=\"line\">    statement</span><br></pre></td></tr></table></figure>\n\n<p>其中，expression部分是一个对象，用于表示一个序列。declaration部分负责定义一个变量，该变量将被用于访问序列中的基础元素。每次迭代，declaration部分的变量会被初始化为expression部分的下一个元素值。一个string对象表示一个字符的序列，因此string对象可以作为范围for语句中的expression部分。举一个简单的例子，我们可以使用范围for语句把string对象中的字符每行一个输出出来：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;hello zack&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历输出str中的每个字符</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> c : str)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>统计字符串中标点符号的数量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">s</span><span class=\"params\">(<span class=\"string\">&quot;Hello World!!!&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(s.<span class=\"built_in\">size</span>()) punct_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//统计s中标点符号的数量</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> c : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">ispunct</span>(c))</span><br><span class=\"line\">        punct_cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cout &lt;&lt; punct_cnt</span><br><span class=\"line\">     &lt;&lt; <span class=\"string\">&quot; punctuation characters in &quot;</span></span><br><span class=\"line\">    &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>将字符串变为大写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将字符串变为大写</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s3</span><span class=\"params\">(<span class=\"string\">&quot;Hello Vivo&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c : s3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过引用string中的字符，然后修改字符</span></span><br><span class=\"line\">    c = <span class=\"built_in\">toupper</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>将第一个单词变为大写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过下标索引修改字符串</span></span><br><span class=\"line\"><span class=\"comment\">//把第一个单词变为大写</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">sind</span><span class=\"params\">(<span class=\"string\">&quot;some string&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">decltype</span>(sind.<span class=\"built_in\">size</span>()) index = <span class=\"number\">0</span>; index != sind.<span class=\"built_in\">size</span>() &amp;&amp; <span class=\"built_in\">isspace</span>(sind[index]); ++index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sind[index] = <span class=\"built_in\">toupper</span>(sind[index]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":null,"text":"介绍string类的使用...","permalink":"/post/C++的string类","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":11,"path":"api/tags/C.json"},{"name":"String类","slug":"String类","count":1,"path":"api/tags/String类.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">初始化和定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#string%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">string操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%85%BC%E5%AE%B9\"><span class=\"toc-text\">对C语言的兼容</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C11%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">C11用法</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vector","uid":"bfb8c7eb75a20258cca7b53c5617a35a","slug":"vector类","date":"2021-05-07T02:15:20.000Z","updated":"2024-05-18T18:58:00.210Z","comments":true,"path":"api/articles/vector类.json","keywords":null,"cover":"img/C++.png","text":"本文介绍vector的使用方法，vector是一种高效访问和修改的容器，支持遍历，索引访问。...","permalink":"/post/vector类","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":11,"path":"api/tags/C.json"},{"name":"Vector","slug":"Vector","count":1,"path":"api/tags/Vector.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null},"next_post":{"title":"C++的输入和输出.","uid":"9a1c9eab819449bb12fa84a4154b8457","slug":"C++的输入和输出","date":"2021-05-01T18:15:58.000Z","updated":"2024-05-18T18:03:42.079Z","comments":true,"path":"api/articles/C++的输入和输出.json","keywords":null,"cover":"img/C++.png","text":"C++的输入和输出以及常见的所有的变量和参数...","permalink":"/post/C++的输入和输出","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":11,"path":"api/tags/C.json"},{"name":"iostream","slug":"iostream","count":1,"path":"api/tags/iostream.json"},{"name":"变量和常量","slug":"变量和常量","count":1,"path":"api/tags/变量和常量.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}