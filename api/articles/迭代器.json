{"title":"迭代器","uid":"5391af7718199d3c4ba5b2fd9250437c","slug":"迭代器","date":"2021-05-08T18:15:50.000Z","updated":"2024-06-11T18:01:08.413Z","comments":true,"path":"api/articles/迭代器.json","keywords":null,"cover":"img/C++.jpg","content":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>当我们要遍历容器如vector,map等复杂结构时，可以通过迭代器进行遍历，依次取出容器中的值。通过容器类的begin()和end()函数获取指向第一个元素位置的迭代器和指向最后一个元素下一个位置的迭代器。 迭代器初步使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iterator_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">s</span><span class=\"params\">(<span class=\"string\">&quot;some string&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.<span class=\"built_in\">begin</span>() != s.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        *it = <span class=\"built_in\">toupper</span>(*it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码修改了字符串第一个字母为大写。只有当字符串为空时<code>s.begin()==s.end()</code></p>\n<h2 id=\"迭代器运算\"><a href=\"#迭代器运算\" class=\"headerlink\" title=\"迭代器运算\"></a>迭代器运算</h2><p>迭代器支持加减运算，支持比较运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*iter 返回iter所指对象得引用</span><br><span class=\"line\">iter-&gt;mem 解引用返回iter所指对象得mem成员</span><br><span class=\"line\">++iter 迭代器位置后移，指向下一个元素</span><br><span class=\"line\">--iter 迭代器位置前移，指向上一个元素</span><br><span class=\"line\">iter1 == iter2 判断iter1和iter2是否相等</span><br><span class=\"line\">iter1 != iter2 判断iter1和iter2不相等</span><br><span class=\"line\">iter = iter + n 迭代器iter向后偏移n个元素</span><br><span class=\"line\">iter = iter -n 迭代器iter 向前偏移n个元素</span><br><span class=\"line\">iter1 &gt;= iter2 迭代器iter1指向的元素是否在iter2之后</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器遍历\"><a href=\"#迭代器遍历\" class=\"headerlink\" title=\"迭代器遍历\"></a>迭代器遍历</h2><p>通过迭代器修改第一个单词为大写，遇到空格或者字符串末尾结束</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">s</span><span class=\"params\">(<span class=\"string\">&quot;some string&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = s.<span class=\"built_in\">begin</span>(); iter != s.<span class=\"built_in\">end</span>() &amp;&amp; !<span class=\"built_in\">isspace</span>(*iter); iter++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    *iter = <span class=\"built_in\">toupper</span>(*iter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;str is &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>通过iter++依次访问s中得每个字符，*iter返回的是每个字符的引用</p>\n<h2 id=\"泛型编程\"><a href=\"#泛型编程\" class=\"headerlink\" title=\"泛型编程\"></a>泛型编程</h2><p>关键概念：泛型编程原来使用C或Java的程序员在转而使用C++语言之后，会对for循环中使用！&#x3D;而非&lt;进行判断有点儿奇怪，。C++程序员习惯性地使用！&#x3D;，其原因和他们更愿意使用迭代器而非下标的原因一样：因为这种编程风格在标准库提供的所有容器上都有效。之前已经说过，只有string和vector等一些标准库类型有下标运算符，而并非全都如此。与之类似，所有标准库容器的迭代器都定义了<code>==</code>和！&#x3D;，但是它们中的大多数都没有定义&lt;运算符。因此，只要我们养成使用迭代器和！&#x3D;的习惯，就不用太在意用的到底是哪种容器类型。</p>\n<h2 id=\"迭代器类型\"><a href=\"#迭代器类型\" class=\"headerlink\" title=\"迭代器类型\"></a>迭代器类型</h2><p>那些拥有迭代器的标准库类型使用iterator和const_iterator来表示迭代器的类型：const_iterator和常量指针差不多，能读取但不能修改它所指的元素值。相反，iterator的对象可读可写。如果vector对象或string对象是一个常量，只能使用const_iterator；如果vector对象或string对象不是常量，那么既能使用iterator也能使用const_iterator。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// it能读写vector&lt;int&gt;的元素</span></span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt;::iterator it;</span><br><span class=\"line\">  <span class=\"comment\">// it2能读写string对象中的字符</span></span><br><span class=\"line\">  vector&lt;string&gt;::iterator it2;</span><br><span class=\"line\">  <span class=\"comment\">// it3 只能读元素,不能写元素</span></span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt;::const_iterator it3;</span><br><span class=\"line\">  <span class=\"comment\">// it4 只能读字符，不能写字符</span></span><br><span class=\"line\">  vector&lt;string&gt;::const_iterator it4;</span><br><span class=\"line\"></span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">  <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; cv;</span><br><span class=\"line\">  <span class=\"comment\">// vit1的类型是vector&lt;int&gt;::iterator</span></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> vit1 = v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">  <span class=\"comment\">// vit2的类型是vector&lt;int&gt;::const_iterator</span></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> vit2 = cv.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">  <span class=\"comment\">//通过cbegin和cend可以获取常量迭代器</span></span><br><span class=\"line\">  <span class=\"comment\">// cvit 类型为vector&lt;int&gt;::const_iterator</span></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> cvit = v.<span class=\"built_in\">cbegin</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解引用\"><a href=\"#解引用\" class=\"headerlink\" title=\"解引用\"></a>解引用</h2><p><code>迭代器解引用要注意将*和迭代器括起来，因为*的优先级比.低，假设iter是vector&lt;string&gt;::iterator类型</code> <code>判断迭代器所指向的字符串是否为空应该用(*iter).empty()</code> <code>如果用*iter.empty()会被编译器理解为对迭代器先进行empty()函数运算再解引用，会报错，因为迭代器没有empty()操作</code> 为了方便可以通过-&gt;解引用取出元素的成员或者成员函数，如下我们通过遍历，直到遇到空字符串就退出遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; text = &#123;<span class=\"string\">&quot;zack&quot;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&quot;vivo&quot;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&quot;lisus&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = text.<span class=\"built_in\">begin</span>(); it != text.<span class=\"built_in\">end</span>() &amp;&amp; !it-&gt;<span class=\"built_in\">empty</span>(); ++it)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器失效\"><a href=\"#迭代器失效\" class=\"headerlink\" title=\"迭代器失效\"></a>迭代器失效</h2><p>在通过迭代器遍历vector,string ,map等容器时，如果遍历的循环中添加元素或者删除元素会导致迭代器失效，因为添加元素或者删除元素会影响迭代器的值，可以通过如下方式在遍历的同时删除元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> itdel = text.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (itdel != text.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itdel-&gt;<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        itdel = text.<span class=\"built_in\">erase</span>(itdel);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    itdel++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>text.erase(itdel)返回的时下一个元素的迭代器，所以直接跳出本次循环继续遍历即可。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>迭代器可以做加减操作，所以我们用迭代器实现一个二分查找, orderv是一个vector,里面的数字是有序的，我们查找9</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; orderv = &#123;<span class=\"number\">1</span>,</span><br><span class=\"line\">                      <span class=\"number\">2</span>,</span><br><span class=\"line\">                      <span class=\"number\">3</span>,</span><br><span class=\"line\">                      <span class=\"number\">5</span>,</span><br><span class=\"line\">                      <span class=\"number\">6</span>,</span><br><span class=\"line\">                      <span class=\"number\">8</span>,</span><br><span class=\"line\">                      <span class=\"number\">9</span>,</span><br><span class=\"line\">                      <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">bool</span> bfind = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> findit = orderv.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> beginit = orderv.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> endit = orderv.<span class=\"built_in\">end</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (beginit != endit)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> midit = beginit + (endit - beginit) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*midit == <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        findit = midit;</span><br><span class=\"line\">        bfind = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*midit &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        endit = midit - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*midit &lt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginit = midit + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (bfind)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;find success, iter val is &quot;</span> &lt;&lt; *findit &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":true,"text":"当我们要遍历容器如vector,map等复杂结构时，可以通过迭代器进行遍历...","permalink":"/post/迭代器","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"迭代器","slug":"迭代器","count":2,"path":"api/tags/迭代器.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">迭代器运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">迭代器遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">泛型编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">迭代器类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">解引用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">迭代器失效</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">二分查找</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vector","uid":"bfb8c7eb75a20258cca7b53c5617a35a","slug":"vector类","date":"2021-05-12T02:15:20.000Z","updated":"2024-06-11T18:01:11.303Z","comments":true,"path":"api/articles/vector类.json","keywords":null,"cover":"img/C++.jpg","text":"本文介绍vector的使用方法，vector是一种高效访问和修改的容器，支持遍历，索引访问。...","permalink":"/post/vector类","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"Vector","slug":"Vector","count":1,"path":"api/tags/Vector.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":true},"next_post":{"title":"String类","uid":"d7215eab570338175fadc0dc91188274","slug":"C++的string类","date":"2021-05-05T04:15:58.000Z","updated":"2024-05-23T07:40:41.099Z","comments":true,"path":"api/articles/C++的string类.json","keywords":null,"cover":"img/C++.jpg","text":"介绍string类的使用...","permalink":"/post/C++的string类","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":8,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":18,"path":"api/tags/C.json"},{"name":"String类","slug":"String类","count":1,"path":"api/tags/String类.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}