{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2021-05-12T04:00:58.000Z","updated":"2024-05-18T18:11:13.323Z","comments":true,"path":"api/articles/数组.json","keywords":null,"cover":"img/C++.jpg","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数组是一种类似于标准库类型vector的数据结构，但是在性能和灵活性的权衡上又与vector有所不同。与vector相似的地方是，数组也是存放类型相同的对象的容器，这些对象本身没有名字，需要通过其所在位置访问。与vector不同的地方是，数组的大小确定不变，不能随意向数组中增加元素。因为数组的大小固定，因此对某些特殊的应用来说程序的运行时性能较好，但是相应地也损失了一些灵活性。</p>\n<h2 id=\"数组初始化\"><a href=\"#数组初始化\" class=\"headerlink\" title=\"数组初始化\"></a>数组初始化</h2><p>初始化数组要指定大小，如果不指定维度系统会根据初始化列表自动设置数组大小，但是不要将数组数组的大小小于列表长度，否则编译器会报错。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">arrary_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不是常量表达式</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> cnt = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">//常量表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">unsigned</span> sz = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">//常量表达式</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">unsigned</span> usz = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">//包含10个整数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"comment\">//含有42个整形指针的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *parr[sz];</span><br><span class=\"line\">    <span class=\"comment\">//含有42个string的数组</span></span><br><span class=\"line\">    string strvec[usz];</span><br><span class=\"line\">    <span class=\"comment\">//含有42个int的数组</span></span><br><span class=\"line\">    string invec[<span class=\"built_in\">get_size</span>()];</span><br><span class=\"line\">    <span class=\"comment\">// 编译报错,因为cnt不是常量表达式</span></span><br><span class=\"line\">    <span class=\"comment\">// string bad[cnt];</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">unsigned</span> msz = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">//含有3个元素的数组，元素值分别为0,1,2</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ia1[msz] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//维度是3的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a2[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//等价于a3[] = &#123;0,1,2,0,0&#125;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a3[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//等价于a4[] = &#123;&quot;hi&quot;,&quot;bye&quot;,&quot;&quot;&#125;</span></span><br><span class=\"line\">    string a4[<span class=\"number\">3</span>] = &#123;<span class=\"string\">&quot;hi&quot;</span>, <span class=\"string\">&quot;bye&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//错误，初始值过多</span></span><br><span class=\"line\">    <span class=\"comment\">// string a5[2] = &#123;0, 1, 2&#125;;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误操作\"><a href=\"#错误操作\" class=\"headerlink\" title=\"错误操作\"></a>错误操作</h2><p>不允许拷贝和赋值不能将数组的内容拷贝给其他数组作为其初始值，也不能用数组为其他数组赋值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//含有3个整数的数组</span></span><br><span class=\"line\"> <span class=\"type\">int</span> a[] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"> <span class=\"comment\">//不允许用一个数组初始化另一个数组</span></span><br><span class=\"line\"> <span class=\"type\">int</span> a2[] = a;</span><br><span class=\"line\"> <span class=\"comment\">//不能把一个数组直接赋值给另一个数组</span></span><br><span class=\"line\">  a2 = a;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂声明\"><a href=\"#复杂声明\" class=\"headerlink\" title=\"复杂声明\"></a>复杂声明</h2><p>和vector一样，数组能存放大多数类型的对象。例如，可以定义一个存放指针的数组。又因为数组本身就是对象，所以允许定义数组的指针及数组的引用。在这几种情况中，定义存放指针的数组比较简单和直接，但是定义数组的指针或数组的引用就稍微复杂一点了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dif_array</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ptrs是含有10个整形指针的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *ptrs[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"comment\">//不存在引用的数组</span></span><br><span class=\"line\">    <span class=\"comment\">// int &amp;refs[10] = /*?*/;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 数组的引用 arrRef是arr的引用</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span>(&amp;arrRef)[<span class=\"number\">10</span>] = arr;</span><br><span class=\"line\">    <span class=\"comment\">// Parray指向一个含有10个整数的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span>(*Parray)[<span class=\"number\">10</span>] = &amp;arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组访问\"><a href=\"#数组访问\" class=\"headerlink\" title=\"数组访问\"></a>数组访问</h2><p>和vector一样，数组也支持下标访问和遍历访问</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit_array</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//以10分为一个分数段统计成绩，0~9，10~19...，90~99,100</span></span><br><span class=\"line\">    <span class=\"comment\">// 11 个分数段，全部初始化为0</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> scores[<span class=\"number\">11</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> grade;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; grade)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grade &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++scores[grade / <span class=\"number\">10</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过for range 遍历打印</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : scores)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指针和数组\"><a href=\"#指针和数组\" class=\"headerlink\" title=\"指针和数组\"></a>指针和数组</h2><p>在C++语言中，指针和数组有非常紧密的联系。使用数组的时候编译器一般会把它转换成指针。 通常情况下，使用取地址符来获取指向某个对象的指针，取地址符可以用于任何对象。 数组的元素也是对象，对数组使用下标运算符得到该数组指定位置的元素。 因此像其他对象一样，对数组的元素使用取地址符就能得到指向该元素的指针：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组的元素是string元素</span></span><br><span class=\"line\"> string nums[] = &#123;<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>&#125;;</span><br><span class=\"line\"> <span class=\"comment\">// p指向nums的第一个元素</span></span><br><span class=\"line\"> string *p = &amp;nums[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>在一些情况下数组的操作实际上是指针的操作，这一结论有很多隐含的意思。其中一层意思是当使用数组作为一个auto变量的初始值时，推断得到的类型是指针而非数组：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ia是一个含有10个整数的数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> ia[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ia2是一个整数型指针，指向ia第一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ia2</span><span class=\"params\">(ia)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//错误：ia2是一个指针，不能用int值给指针赋值</span></span><br><span class=\"line\"><span class=\"comment\">// ia2 = 42;</span></span><br></pre></td></tr></table></figure>\n\n<p>尽管ia是由10个整数构成的数组，但当使用ia作为初始值时，编译器实际执行的初始化过程类似于下面的形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ia2是<span class=\"type\">int</span>*类型</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ia2</span><span class=\"params\">(&amp;ia[<span class=\"number\">0</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>必须指出的是，当使用decltype关键字时上述转换不会发生，decltype（ia）返回的类型是由10个整数构成的数组：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ia3是一个含有10个整数的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(ia) ia3 = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> *pint = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">//错误，不能用整形指针给数组赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// ia3 = pint;</span></span><br><span class=\"line\">    <span class=\"comment\">//正确，可以对数组的元素赋值</span></span><br><span class=\"line\">    ia3[<span class=\"number\">4</span>] = <span class=\"number\">1024</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指针也是迭代器\"><a href=\"#指针也是迭代器\" class=\"headerlink\" title=\"指针也是迭代器\"></a>指针也是迭代器</h2><p>就像使用迭代器遍历vector对象中的元素一样，使用指针也能遍历数组中的元素。当然，这样做的前提是先得获取到指向数组第一个元素的指针和指向数组尾元素的下一位置的指针。之前已经介绍过，通过数组名字或者数组中首元素的地址都能得到指向首元素的指针；不过获取尾后指针就要用到数组的另外一个特殊性质了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr; <span class=\"comment\">// p指向arr的第一个元素</span></span><br><span class=\"line\">++p;          <span class=\"comment\">// p指向arr[1]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以设法获取数组尾元素之后的那个并不存在的元素的地址：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *e = &amp;arr[<span class=\"number\">10</span>]; <span class=\"comment\">//指向arr尾元素的下一个位置的指针</span></span><br></pre></td></tr></table></figure>\n\n<p>这里显然使用下标运算符索引了一个不存在的元素，arr有10个元素，尾元素所在位置的索引是9，接下来那个不存在的元素唯一的用处就是提供其地址用于初始化e。就像尾后迭代器一样，尾后指针也不指向具体的元素。因此，不能对尾后指针执行解引用或递增的操作。 所以我们利用指针的末尾元素可以实现另一种方式的遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> *b = arr; b != e; ++b)</span><br><span class=\"line\">       cout &lt;&lt; *b &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>数组也支持sizeof操作sizeof计算的是数组所占用的空间,除以sizeof(int)，得到的就是数组的长度，所以数组的遍历可以这样</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>); i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标准库函数begin\"><a href=\"#标准库函数begin\" class=\"headerlink\" title=\"标准库函数begin\"></a>标准库函数begin</h2><p>尽管能计算得到尾后指针，但这种用法极易出错。为了让指针的使用更简单、更安全，C++11新标准引入了两个名为begin和end的函数。这两个函数与容器中的两个同名成员功能类似，不过数组毕竟不是类类型，因此这两个函数不是成员函数。正确的使用形式是将数组作为它们的参数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// beg指向arr第一个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *beg = <span class=\"built_in\">begin</span>(arr);</span><br><span class=\"line\">    <span class=\"comment\">// last指向arr最后一个元素的下一个位置</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *last = <span class=\"built_in\">end</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (beg != last)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *beg &lt;&lt; endl;</span><br><span class=\"line\">        beg++;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过begin和end函数获取数组第一个元素地址和最后一个元素的下一个位置，然后实现遍历，非常安全</p>\n<h2 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h2><p>指向数组元素的指针包括解引用、递增、比较、与整数相加、两个指针相减等，用在指针和用在迭代器上意义完全一致。给（从）一个指针加上（减去）某整数值，结果仍是指针。新指针指向的元素与原来的指针相比前进了（后退了）该整数值个位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//等价于int *p = &amp;arr[0]</span></span><br><span class=\"line\"><span class=\"type\">int</span> *ip = arr;</span><br><span class=\"line\"><span class=\"comment\">//等价于ip2指向arr的第四个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> *ip2 = ip + <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>另外一种计算数组元素个数的方式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// beg指向arr第一个元素</span></span><br><span class=\"line\">   <span class=\"type\">int</span> *beg = <span class=\"built_in\">begin</span>(arr);</span><br><span class=\"line\">   <span class=\"comment\">// last指向arr最后一个元素的下一个位置</span></span><br><span class=\"line\">   <span class=\"type\">int</span> *last = <span class=\"built_in\">end</span>(arr);</span><br><span class=\"line\">   <span class=\"type\">int</span> length = last - beg;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C风格字符串\"><a href=\"#C风格字符串\" class=\"headerlink\" title=\"C风格字符串\"></a>C风格字符串</h2><p>C风格字符串被C++包含在cstring头文件里,包括strcmp字符串比较，strcpy字符串copy，strcat字符串连接 比较字符串</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> cal1[] = <span class=\"string\">&quot;A string example&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> cal2[] = <span class=\"string\">&quot;A different string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(cal1, cal2) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;cal1 is less than cal2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;cal2 is less than cal1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串连接 字符串的连接用到了memset清空操作，以及strcpy, strcat等操作，大家看看就好不用深入理解，这是C语言的方式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">c_string</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> cal1[] = <span class=\"string\">&quot;A string example&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> cal2[] = <span class=\"string\">&quot;A different string&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(cal1, cal2) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;cal1 is less than cal2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;cal2 is less than cal1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> total_len = <span class=\"built_in\">strlen</span>(cal1) + <span class=\"built_in\">strlen</span>(cal2) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//开辟total_len字节的空间</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *total_str = <span class=\"keyword\">new</span> <span class=\"built_in\">char</span>(total_len);</span><br><span class=\"line\">    <span class=\"comment\">//将空间清空为0</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(total_str, <span class=\"number\">0</span>, total_len);</span><br><span class=\"line\">    <span class=\"comment\">//将cal1 copy 到 total_str</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(total_str, cal1);</span><br><span class=\"line\">    <span class=\"comment\">//将total_str和cal2连接</span></span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(total_str, cal2);</span><br><span class=\"line\">    <span class=\"comment\">//输出total_str 的值</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;total_str is &quot;</span> &lt;&lt; total_str &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//最后释放内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total_str != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> total_str;</span><br><span class=\"line\">        total_str = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>习惯使用C语言的同学可以通过c_str()函数将string转化为const char*类型的字符串</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> strcpp = <span class=\"string\">&quot;CPP&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *strc = strcpp.c_str();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用数组初始化vector对象\"><a href=\"#使用数组初始化vector对象\" class=\"headerlink\" title=\"使用数组初始化vector对象\"></a>使用数组初始化vector对象</h2><p>vector除了可以通过初始化列表，指定初始值和大小等方式外，还可以通过数组和vector初始化 通过vector初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : v2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; v &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过数组初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vector_init2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[] = &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v3</span><span class=\"params\">(begin(a), end(a))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : v3)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; v &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":null,"text":"数组是一种类似于标准库类型vector的数据结构，...","permalink":"/post/数组","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":7,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":8,"path":"api/tags/C.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">数组初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">错误操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">复杂声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">数组访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">指针和数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E4%B9%9F%E6%98%AF%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">指针也是迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0begin\"><span class=\"toc-text\">标准库函数begin</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">指针运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">C风格字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96vector%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">使用数组初始化vector对象</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"多维数组","uid":"078e2f87da9d852a50ee4a0e04f46d2b","slug":"多维数组","date":"2021-05-15T14:15:53.000Z","updated":"2024-05-18T18:12:15.916Z","comments":true,"path":"api/articles/多维数组.json","keywords":null,"cover":"img/C++.jpg","text":"介绍C++中多维数组的使用...","permalink":"/post/多维数组","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":7,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":8,"path":"api/tags/C.json"},{"name":"多维数组","slug":"多维数组","count":1,"path":"api/tags/多维数组.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null},"next_post":{"title":"迭代器","uid":"5391af7718199d3c4ba5b2fd9250437c","slug":"迭代器","date":"2021-05-08T18:15:50.000Z","updated":"2024-05-18T18:12:11.072Z","comments":true,"path":"api/articles/迭代器.json","keywords":null,"cover":"img/C++.jpg","text":"当我们要遍历容器如vector,map等复杂结构时，可以通过迭代器进行遍历...","permalink":"/post/迭代器","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":7,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":8,"path":"api/tags/C.json"},{"name":"迭代器","slug":"迭代器","count":1,"path":"api/tags/迭代器.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null}}