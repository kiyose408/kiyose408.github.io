{"title":"多维数组","uid":"078e2f87da9d852a50ee4a0e04f46d2b","slug":"多维数组","date":"2021-05-07T14:15:53.000Z","updated":"2024-05-16T19:49:42.195Z","comments":true,"path":"api/articles/多维数组.json","keywords":null,"cover":null,"content":"<h2 id=\"数组的数组\"><a href=\"#数组的数组\" class=\"headerlink\" title=\"数组的数组\"></a>数组的数组</h2><p>严格来说，C++语言中没有多维数组，通常所说的多维数组其实是数组的数组。谨记这一点，对今后理解和使用多维数组大有益处。当一个数组的元素仍然是数组时，通常使用两个维度来定义它：一个维度表示数组本身大小，另外一个维度表示其元素（也是数组）大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multi_array</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//大小为3的数组，每个元素是含有4个整数的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//大小为10的数组,他的每个元素都是大小为20的数组</span></span><br><span class=\"line\">    <span class=\"comment\">//这些数组的元素是含有30个整数的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arr[<span class=\"number\">10</span>][<span class=\"number\">20</span>][<span class=\"number\">30</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多维数组初始化\"><a href=\"#多维数组初始化\" class=\"headerlink\" title=\"多维数组初始化\"></a>多维数组初始化</h2><p>允许使用花括号括起来的一组值初始化多维数组，这点和普通的数组一样。下面的初始化形式中，多维数组的每一行分别用花括号括了起来：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multi_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//三个元素，每个元素大小都是4的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//可以用一个花括号初始化二维数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ib[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//显示初始化每行的首元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ic[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;&#123;<span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">8</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//显示初始化第一行,其他元素被初始化为0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下标访问\"><a href=\"#下标访问\" class=\"headerlink\" title=\"下标访问\"></a>下标访问</h2><p>可以使用下标运算符来访问多维数组的元素，此时数组的每个维度对应一个下标运算符。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">      <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//用arr的首元素为ia最后一行的最后一个元素赋值</span></span><br><span class=\"line\">  <span class=\"type\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  ia[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// row是一个ia第二个元素数组的引用，包含四个元素</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span>(&amp;row)[<span class=\"number\">4</span>] = ia[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n\n<p>程序中经常会用到两层嵌套的for循环来处理多维数组的元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"type\">int</span> ia[rowCnt][colCnt]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">constexpr</span> <span class=\"type\">size_t</span> rowCnt = <span class=\"number\">3</span>, colCnt = <span class=\"number\">4</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i != rowCnt; ++i)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">//对于行内的每一列</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j != colCnt; ++j)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//将元素的位置索引作为他的值</span></span><br><span class=\"line\">           ia[i][j] = i * colCnt + j;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用范围 for语句处理多维数组,由于在C++11新标准中新增了范围for语句，所以前一个程序可以简化为如下形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">size_t</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;row : ia)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;col : row)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           col = cnt++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为要改变数组元素的值，所以我们选用引用类型作为循环控制变量，但其实还有一个深层次的原因促使我们这么做。举一个例子，考虑如下的循环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;row : ia)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> col : row)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          cout &lt;&lt; col &lt;&lt; endl;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个循环中并没有任何写操作，可是我们还是将外层循环的控制变量声明成了引用类型，这是为了避免数组被自动转成指针,假设不用引用类型，则循环如下述形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> row : ia)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> col : row)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; col &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序将无法通过编译。这是因为，像之前一样第一个循环遍历ia的所有元素，注意这些元素实际上是大小为4的数组。因为row不是引用类型，所以编译器初始化row时会自动将这些数组形式的元素（和其他类型的数组一样）转换成指向该数组内首元素的指针。这样得到的row的类型就是int＊，显然内层的循环就不合法了，编译器将试图在一个int＊内遍历，这显然和程序的初衷相去甚远。 要使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。</p>\n<h2 id=\"指针和多维数组\"><a href=\"#指针和多维数组\" class=\"headerlink\" title=\"指针和多维数组\"></a>指针和多维数组</h2><p>当程序使用多维数组的名字时，也会自动将其转换成指向数组首元素的指针。 定义指向多维数组的指针时，千万别忘了这个多维数组实际上是数组的数组。 因为多维数组实际上是数组的数组，所以由多维数组名转换得来的指针实际上是指向第一个内层数组的指针：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multi_pointer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//大小为3的数组，每个元素是含有4个整数的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">// p指向含有4个整数的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span>(*p)[<span class=\"number\">4</span>] = ia;</span><br><span class=\"line\">    <span class=\"comment\">// p指向ia的尾元素</span></span><br><span class=\"line\">    p = &amp;ia[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们首先明确（＊p）意味着p是一个指针。接着观察右边发现，指针p所指的是一个维度为4的数组；再观察左边知道，数组中的元素是整数。因此，p就是指向含有4个整数的数组的指针。 在上述声明中，圆括号必不可少：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//整数指针的数组</span></span><br><span class=\"line\">   <span class=\"type\">int</span> *ib[<span class=\"number\">4</span>];</span><br><span class=\"line\">   <span class=\"comment\">//指向含有4个整数的数组</span></span><br><span class=\"line\">   <span class=\"built_in\">int</span>(*ib)[<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<p>随着C++11新标准的提出，通过使用auto或者decltype,就能尽可能地避免在数组前面加上一个指针类型了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p指向一个含有4个整数的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = ia; p != ia + <span class=\"number\">3</span>; ++p)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// q指向4个整数数组的首元素，也就是说q指向一个整数</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> q = *p; q != *p + <span class=\"number\">4</span>; q++)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           cout &lt;&lt; *q &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       cout &lt;&lt; endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>外层的for循环首先声明一个指针p并令其指向ia的第一个内层数组，然后依次迭代直到ia的全部3行都处理完为止。其中递增运算++p负责将指针p移动到ia的下一行。内层的for循环负责输出内层数组所包含的值。它首先令指针q指向p当前所在行的第一个元素。＊p是一个含有4个整数的数组，像往常一样，数组名被自动地转换成指向该数组首元素的指针。内层for循环不断迭代直到我们处理完了当前内层数组的所有元素为止。为了获取内层for循环的终止条件，再一次解引用p得到指向内层数组首元素的指针，给它加上4就得到了终止条件。 当然，使用标准库函数begin和end也能实现同样的功能，而且看起来更简洁一些：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p指向ia的第一个数组</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = <span class=\"built_in\">begin</span>(ia); p != <span class=\"built_in\">end</span>(ia); p++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// q指向内层数组的首元素</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> q = <span class=\"built_in\">begin</span>(*p); q != <span class=\"built_in\">end</span>(*p); q++)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//输出q所指的整数</span></span><br><span class=\"line\">           cout &lt;&lt; *q &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       cout &lt;&lt; endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环终止条件由end函数负责判断。虽然我们也能推断出p的类型是指向含有4个整数的数组的指针，q的类型是指向整数的指针，但是使用auto关键字我们就不必再烦心这些类型到底是什么了。</p>\n<h2 id=\"类型别名简化多维数组的指针\"><a href=\"#类型别名简化多维数组的指针\" class=\"headerlink\" title=\"类型别名简化多维数组的指针\"></a>类型别名简化多维数组的指针</h2><p>可以通过typedef和using等关键字定义类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C11新标准定义类型别名</span></span><br><span class=\"line\"><span class=\"comment\">// int_array 是一个包含四个元素的整形数组类型</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> int_array = <span class=\"type\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">//等价的typedef声明</span></span><br><span class=\"line\"><span class=\"comment\">// int_array_same 是一个包含四个元素的整形数组类型</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> int_array_same[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">//如果不会用typedef定义数组类型，可以先定义一个数组变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> int_array_inst[<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果不会用typedef定义数组类型，可以先定义一个数组变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> int_array_inst[<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<p>然后加上typedef即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> int_array_inst[<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<p>此时int_array_inst就是一个大小为4的整形数组类型。 通过类型定义，我们重新实现遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">//输出ia中每个元素的值，每个内层数组各占一行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int_array *p = ia; p != ia + <span class=\"number\">3</span>; p++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> *q = *p; q != *p + <span class=\"number\">4</span>; q++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *q &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":true,"text":"介绍C++中多维数组的使用...","permalink":"/post/多维数组","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":6,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":7,"path":"api/tags/C.json"},{"name":"多维数组","slug":"多维数组","count":1,"path":"api/tags/多维数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组的数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">多维数组初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E6%A0%87%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">下标访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">指针和多维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%AE%80%E5%8C%96%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%8C%87%E9%92%88\"><span class=\"toc-text\">类型别名简化多维数组的指针</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"强风吹拂~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"函数","uid":"d7ccd0a2fc5b38ef8ee1737116d9945c","slug":"函数","date":"2021-05-08T12:10:53.000Z","updated":"2024-05-16T19:50:16.299Z","comments":true,"path":"api/articles/函数.json","keywords":null,"cover":null,"text":"一个典型的函数（function）定义包括以下部分：返回类型（return type）、函数名字、由0个或多个形参（parameter）组成的列表以及函数体。其中，形参以逗号隔开，形参的列表位于一对圆括号之内，如下就是一个函数的定义...","permalink":"/post/函数","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":6,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":7,"path":"api/tags/C.json"},{"name":"函数","slug":"函数","count":1,"path":"api/tags/函数.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"强风吹拂~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2021-05-06T04:00:58.000Z","updated":"2024-05-16T19:48:47.080Z","comments":true,"path":"api/articles/数组.json","keywords":null,"cover":null,"text":"数组是一种类似于标准库类型vector的数据结构，但是在性能和灵活性的权衡上又与vector有所不同。与vector相似的地方是，数组也是存放类型相同的对象的容器，这些对象本身没有名字，需要通过其所在位置访问。与vector不同的地方是，数组的大小确定不变，不能随意向数组中增加元素。因为数组的大小固定，因此对某些特殊的应用来说程序的运行时性能较好，但是相应地也损失了一些灵活性。...","permalink":"/post/数组","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":6,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":7,"path":"api/tags/C.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"强风吹拂~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}