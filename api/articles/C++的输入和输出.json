{"title":"C++的输入和输出.","uid":"9a1c9eab819449bb12fa84a4154b8457","slug":"C++的输入和输出","date":"2021-05-01T18:15:58.000Z","updated":"2024-05-18T18:03:42.079Z","comments":true,"path":"api/articles/C++的输入和输出.json","keywords":null,"cover":"img/C++.png","content":"<h1 id=\"iostream\"><a href=\"#iostream\" class=\"headerlink\" title=\"iostream\"></a>iostream</h1><p>C++提供了标准的输入输出流功能，需要包含iostream头文件，之后就可以使用cin进行输入，cout进行输出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cin_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string input;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input your words &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; input;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;your input is &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; input &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input your words</span><br><span class=\"line\">zack</span><br><span class=\"line\">your input is</span><br><span class=\"line\">zack</span><br></pre></td></tr></table></figure>\n<p><code>&gt;&gt;</code>  会获取输入来写入缓存，并返回cin对象，<code>&lt;&lt;</code>  会从缓存中读取数据，写入cout并返回cout，最后endl会将cout缓存中的数据输出到终端。</p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">var_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整形，4字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">//ll整形, 8字节</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> lla = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"comment\">//长整型， 4 字节</span></span><br><span class=\"line\">    <span class=\"type\">long</span> la = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">//短整型,2 字节</span></span><br><span class=\"line\">    <span class=\"type\">short</span> sa = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"comment\">//带符号字符型,</span></span><br><span class=\"line\">    <span class=\"comment\">//字符型使用时最好指示带符号还是不带符号</span></span><br><span class=\"line\">    <span class=\"comment\">//因为在不同的机器上不指明char符号可能会有问题</span></span><br><span class=\"line\">    <span class=\"type\">signed</span> <span class=\"type\">char</span> sc = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//无符号字符型</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> uc = <span class=\"string\">&#x27;m&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//bool类型</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> bt = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><p>当我们把一个非布尔类型的算术值赋给布尔类型时，初始值为0则结果为false，否则结果为true。 当我们把一个布尔值赋给非布尔类型时，初始值为false则结果为0，初始值为true则结果为1。 当我们把一个浮点数赋给整数类型时，进行了近似处理。结果值将仅保留浮点数中小数点之前的部分。 当我们把一个整数值赋给浮点类型时，小数部分记为0。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。 当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0至255区间内的值，如果我们赋了一个区间以外的值，则实际的结果是该值对256取模后所得的余数。因此，把-1赋给8比特大小的unsigned char所得的结果是255。 当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> b = <span class=\"number\">42</span>; <span class=\"comment\">//b为true</span></span><br><span class=\"line\"><span class=\"type\">int</span> i = b; <span class=\"comment\">//i 为1</span></span><br><span class=\"line\">i = <span class=\"number\">3.14</span>; <span class=\"comment\">//i 为3</span></span><br><span class=\"line\"><span class=\"type\">double</span> pi = i; <span class=\"comment\">//pi为3.0</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> c = <span class=\"number\">-1</span>; <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"变量的声明和定义\"><a href=\"#变量的声明和定义\" class=\"headerlink\" title=\"变量的声明和定义\"></a>变量的声明和定义</h1><p>用extern在头文件声明，在CPP源文件中定义，可以保证变量不会被重复包含。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只声明a</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> a;</span><br></pre></td></tr></table></figure>\n<p>如果extern后面做了赋值操作，则不是声明而是定义。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> a= <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>不带extern直接类型+变量名就是定义。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如下都是定义</span></span><br><span class=\"line\"><span class=\"type\">int</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> num ;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用就是变量的别名，通过修改引用达到修改变量的值的目的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">// i 是j的引用</span></span><br><span class=\"line\"><span class=\"type\">int</span> &amp;i = j;</span><br><span class=\"line\">j = <span class=\"number\">200</span>;</span><br><span class=\"line\">cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p>指针值指针的值（即地址）应属下列4种状态之一： 1.指向一个对象。 2.指向紧邻对象所占空间的下一个位置。 3.空指针，意味着指针没有指向任何对象。 4.无效指针，也就是上述情况之外的其他值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过对指针的值做解引用(*)，拿到其指向的值，再修改这个值，达到修改指向对象数据的目的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">piont_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *page = &amp;age;</span><br><span class=\"line\">    *page += <span class=\"number\">2</span>;</span><br><span class=\"line\">    cout &lt;&lt; age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; page &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指向指针的引用\"><a href=\"#指向指针的引用\" class=\"headerlink\" title=\"指向指针的引用\"></a>指向指针的引用</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">poinref_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">// p是一个指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p;</span><br><span class=\"line\">    <span class=\"comment\">// r 是一个对p的引用</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *&amp;r = p;</span><br><span class=\"line\">    <span class=\"comment\">// 令r指向了一个指针p</span></span><br><span class=\"line\">    <span class=\"comment\">//给r赋值为&amp;i,就是p指向了i</span></span><br><span class=\"line\">    r = &amp;i;</span><br><span class=\"line\">    <span class=\"comment\">//解引用r得到i,也就是p指向的对象，将i的值修改为0</span></span><br><span class=\"line\">    *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">const_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 常量定义一定要初始化赋值，否则编译报错</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> bufSize = <span class=\"number\">512</span>;</span><br><span class=\"line\">    <span class=\"comment\">//修改bufSize的值会报错</span></span><br><span class=\"line\">    <span class=\"comment\">//编译器提示表达式必须是可修改的左值</span></span><br><span class=\"line\">    <span class=\"comment\">// bufSize = 222;</span></span><br><span class=\"line\">    <span class=\"comment\">//运行时初始化</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> i = <span class=\"built_in\">get_size</span>();</span><br><span class=\"line\">    <span class=\"comment\">//编译时初始化</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> j = <span class=\"number\">43</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果定义const变量不初始化也会报错</span></span><br><span class=\"line\">    <span class=\"comment\">// const int k;</span></span><br><span class=\"line\">    <span class=\"comment\">//利用一个常量初始化另一个常量</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> cj = j;</span><br><span class=\"line\">    <span class=\"comment\">// const引用,引用及其对应的对象都是const</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;r1 = cj;</span><br><span class=\"line\">    <span class=\"comment\">//不可以修改r1的值</span></span><br><span class=\"line\">    <span class=\"comment\">// r1 = 42;</span></span><br><span class=\"line\">    <span class=\"comment\">//不可以用非常量引用指向一个常量对象</span></span><br><span class=\"line\">    <span class=\"comment\">// int &amp;r2 = ci;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> iv = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">//允许将const int&amp;绑定到一个普通int对象上</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;r1 = iv;</span><br><span class=\"line\">    <span class=\"comment\">//正确, r2是一个常量引用</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;r2 = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"comment\">//正确, r3是一个常量引用</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;r3 = r1 * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//错误, r4 是一个普通非常量的引用</span></span><br><span class=\"line\">    <span class=\"comment\">// int &amp;r4 = r1 * 2;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指向常量的指针\"><a href=\"#指向常量的指针\" class=\"headerlink\" title=\"指向常量的指针\"></a>指向常量的指针</h1><p>指向常量的指针不可以通过指针修改指向内容的数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pconst_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//指向常量的指针</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> pi = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    <span class=\"comment\">//不可以用普通指针指向常量</span></span><br><span class=\"line\">    <span class=\"comment\">// double *ptr = &amp;pi;</span></span><br><span class=\"line\">    <span class=\"comment\">//用常量指针指向常量</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> *cptr = &amp;pi;</span><br><span class=\"line\">    <span class=\"comment\">//不能给*cptr赋值因为cptr指向的是常量</span></span><br><span class=\"line\">    <span class=\"comment\">// *cptr = 42;</span></span><br><span class=\"line\">    <span class=\"comment\">//指向常量的指针指向非常量</span></span><br><span class=\"line\">    <span class=\"type\">double</span> dval = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    cptr = &amp;dval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常量指针\"><a href=\"#常量指针\" class=\"headerlink\" title=\"常量指针\"></a>常量指针</h1><p>指针是对象而引用不是，因此就像其他对象类型一样，允许把指针本身定为常量。 常量指针（const pointer）必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。 把＊放在const关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常量指针</span></span><br><span class=\"line\"><span class=\"comment\">//常量指针的值初始化后就不允许修改</span></span><br><span class=\"line\"><span class=\"type\">int</span> errNumb = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// curErr将一直指向errNumb</span></span><br><span class=\"line\"><span class=\"type\">int</span> *<span class=\"type\">const</span> curErr = &amp;errNumb;</span><br><span class=\"line\"><span class=\"comment\">//不允许修改curErr的指向</span></span><br><span class=\"line\"><span class=\"type\">int</span> rightNumb = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//编译报错，提示=左侧必须为可修改的左值</span></span><br><span class=\"line\"><span class=\"comment\">// curErr = &amp;rightNumb;</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\"><span class=\"comment\">// pip是一个指向常量对象的常量指针</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> *<span class=\"type\">const</span> pip = &amp;pi;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"顶层const\"><a href=\"#顶层const\" class=\"headerlink\" title=\"顶层const\"></a>顶层const</h1><p>指针本身是一个对象，它又可以指向另外一个对象。因此，指针本身是不是常量以及指针所指的是不是一个常量就是两个相互独立的问题。用名词顶层const（top-levelconst）表示指针本身是个常量，而用名词底层const（low-level const）表示指针所指的对象是一个常量。顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用，如算术类型、类、指针等。底层const则与指针和引用等复合类型的基本类型部分有关。比较特殊的是，指针类型既可以是顶层const也可以是底层const。</p>\n<h1 id=\"constexper变量\"><a href=\"#constexper变量\" class=\"headerlink\" title=\"constexper变量\"></a>constexper变量</h1><p>在一个复杂系统中，很难（几乎肯定不能）分辨一个初始值到底是不是常量表达式。当然可以定义一个const变量并把它的初始值设为我们认为的某个常量表达式，但在实际使用时，尽管要求如此却常常发现初始值并非常量表达式的情况。可以这么说，在此种情况下，对象的定义和使用根本就是两回事儿</p>\n<p>C++11新标准规定，允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">constexpr_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 20是一个常量表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> mf = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">// mf + 1是一个常量表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> limit = mf + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// size是一个constexpr函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> sizen = <span class=\"built_in\">size</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尽管不能使用普通函数作为constexpr变量的初始值，新标准允许定义一种特殊的constexpr函数。这种函数应该足够简单以使得编译时就可以计算其结果，这样就能用constexpr函数去初始化constexpr变量了。</p>\n<p>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。因为这些类型一般比较简单，值也显而易见、容易得到，就把它们称为“字面值类型”（literal type）。到目前为止接触过的数据类型中，算术类型、引用和指针都属于字面值类型。 尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格限制。一个constexpr指针的初始值必须是nullptr或者0，或者是存储于某个固定地址中的对象。</p>\n<h1 id=\"指针和constexpr\"><a href=\"#指针和constexpr\" class=\"headerlink\" title=\"指针和constexpr\"></a>指针和constexpr</h1><p>在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pointer_constexpr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// p是一个指向整形常量的指针,p可以修改，但是*P不可修改</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> *p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">// q是一个指向整形变量的常量指针,q不可修改,但是*q可以修改</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> *q = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>p和q的类型相差甚远，p是一个指向常量的指针，而q是一个常量指针，其中的关键在于constexpr把它所定义的对象置为顶层const。与其他常量指针类似，constexpr 指针既可以指向常量也可以指向一个非常量：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// i 的类型是整型常量</span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pointer_constexpr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// p是一个指向整形常量的指针,p可以修改，但是*P不可修改</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> *p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">// q是一个指向整形变量的常量指针,q不可修改,但是*q可以修改</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> *q = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">// np是一个指向整数的常量指针，其中为空</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> *np = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">// i和j必须定义在函数体之外，否则报错，提示p访问运行时存储</span></span><br><span class=\"line\">    <span class=\"comment\">//因为constexpr要求表达式为常量，在编译时展开</span></span><br><span class=\"line\">    <span class=\"comment\">//  p是常量指针，指向整形常量i</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">const</span> <span class=\"type\">int</span> *p2 = &amp;i;</span><br><span class=\"line\">    <span class=\"comment\">// p1是常量指针，指向整数j</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> *p1 = &amp;j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h1><p>类型别名(type alias)是一个名字，他是某种类型的同义词。使用类型别名有很多好处，它让复杂的类型名字变得简单明了、易于理解和使用，还有助于程序员清楚的知道使用该类型的真实目的。有两种方法可用于定义类型别名。传统的方法是使用关键字typedef: 1 typedef</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">typedef_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// wages是double的同义词</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"type\">double</span> wages;</span><br><span class=\"line\">    <span class=\"comment\">// base是double的同义词， p 是double*的同义词</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> wages base, *p;</span><br><span class=\"line\">    <span class=\"comment\">// C11用法</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> newd = <span class=\"type\">double</span>;</span><br><span class=\"line\">    newd dd = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新标准规定了一种新的方法，使用别名声明（aliasdeclaration）来定义类型的别名，using newd &#x3D; 都变了就是通过using定义new类型和double是相同的。</p>\n<p>如果某个类型别名指代的是复合类型或常量，那么把它用到声明语句里就会产生意想不到的后果。例如下面的声明语句用到了类型pstring，它实际上是<code>char *</code>的别名。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">typedef_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"type\">char</span> *pstring;</span><br><span class=\"line\">    <span class=\"comment\">// pstring是一个指向char的常量指针</span></span><br><span class=\"line\">    <span class=\"type\">const</span> pstring cstr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ps 是一个指针，其对象是指向char的常量指针</span></span><br><span class=\"line\">    <span class=\"type\">const</span> pstring *ps;</span><br><span class=\"line\">    <span class=\"type\">char</span> b = <span class=\"string\">&#x27;H&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//不可修改</span></span><br><span class=\"line\">    <span class=\"comment\">// cstr = &amp;b;</span></span><br><span class=\"line\">    ps = &amp;cstr;</span><br><span class=\"line\">    <span class=\"type\">const</span> pstring cstr2 = &amp;b;</span><br><span class=\"line\">    ps = &amp;cstr2;</span><br><span class=\"line\">    <span class=\"comment\">//不可修改*ps的值</span></span><br><span class=\"line\">    <span class=\"comment\">// *ps = cstr;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"auto-推导\"><a href=\"#auto-推导\" class=\"headerlink\" title=\"auto 推导\"></a>auto 推导</h1><p>编程时常常需要把表达式的值付给变量，这就要求在声明变量的时候清楚地知道表达式的类型。为了做到这一点在C++11新标准中引入了auto类型说明符，用它就能让编译器去分析表达式所属的类型。和原来那些只对应一种特定类型的说明符（比如double）不同，auto让编译器通过初始值来推算变量的类型。显然，auto定义的变量必须有初始值，使用auto也能在一条语句中声明多个变量。因为一条声明语句只能有一个基本数据类型，所以该语句中所有变量的初始基本数据类型都必须一样。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">auto_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">// c被推导为int类型</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> c = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>, *p = &amp;i;</span><br><span class=\"line\">    <span class=\"comment\">//一条声明语句只能有一个基本数据类型</span></span><br><span class=\"line\">    <span class=\"comment\">//不同类型编译器会报错</span></span><br><span class=\"line\">    <span class=\"comment\">// auto sz = 0, pi = 3.14;</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> ma = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// auto会忽略顶层const</span></span><br><span class=\"line\">    <span class=\"comment\">//可以通过const明确指出，此时f为const int类型</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"keyword\">auto</span> f = ma;</span><br><span class=\"line\">    <span class=\"comment\">// auto配合引用类型</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> &amp;g = a;</span><br><span class=\"line\">    <span class=\"comment\">// 不能为非常量引用绑定字面值</span></span><br><span class=\"line\">    <span class=\"comment\">// auto &amp;h = 42;</span></span><br><span class=\"line\">    <span class=\"comment\">//指明const 引用绑定字面值</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;j = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>auto一般会忽略掉顶层const，同时底层const则会保留下来 要在一条语句中定义多个变量，切记，符号&amp;和＊只从属于某个声明符，而非基本数据类型的一部分，因此初始值必须是同一种类型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// k是int类型，l是int的引用</span></span><br><span class=\"line\"><span class=\"comment\">// auto 忽略了顶层const</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> k = ci, &amp;l = i;</span><br><span class=\"line\"><span class=\"comment\">// m是int常量的引用，p是指向int常量的指针</span></span><br><span class=\"line\"><span class=\"comment\">// auto保留了底层const</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;m = ci, *p = &amp;ci;</span><br><span class=\"line\"><span class=\"comment\">// 错误 i的类型是int， ci的类型是 const int</span></span><br><span class=\"line\"><span class=\"comment\">// auto &amp;n = i, *p2 = &amp;ci;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"decltype类型指示符\"><a href=\"#decltype类型指示符\" class=\"headerlink\" title=\"decltype类型指示符\"></a>decltype类型指示符</h1><p>有时会遇到这种情况：希望从表达式的类型推断出要定义的变量的类型，但是不想用该表达式的值初始化变量。为了满足这一要求，C++11新标准引入了第二种类型说明符decltype，它的作用是选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">decltype</span>(<span class=\"built_in\">size</span>()) sum;</span><br></pre></td></tr></table></figure>\n\n<p>编译器并不实际调用函数size，而是使用当调用发生时size的返回值类型作为sum的类型。换句话说，编译器为sum指定的类型是什么呢？就是假如size被调用的话将会返回的那个类型。decltype处理顶层const和引用的方式与auto有些许不同。如果decltype使用的表达式是一个变量，则decltype返回该变量的类型（包括顶层const和引用在内）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">decltype_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(<span class=\"built_in\">size</span>()) sum;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> ci = <span class=\"number\">0</span>, &amp;cj = ci;</span><br><span class=\"line\">    <span class=\"comment\">// x的类型是const int</span></span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(ci) x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// y的类型是 const int&amp; , y绑定到变量x</span></span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(cj) y = x;</span><br><span class=\"line\">    <span class=\"comment\">//错误，z是一个引用，必须初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// decltype(cj) z;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为cj是一个引用，decltype（cj）的结果就是引用类型，因此作为引用的z必须被初始化。需要指出的是，引用从来都作为其所指对象的同义词出现，只有用在decltype处是一个例外。如果decltype使用的表达式不是一个变量，则decltype返回表达式结果对应的类型.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class=\"line\"><span class=\"comment\">// b1 是一个int类型的引用</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(r) b1 = i;</span><br><span class=\"line\"><span class=\"comment\">// r+0 通过decltype返回int类型</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(r + <span class=\"number\">0</span>) b2;</span><br><span class=\"line\"><span class=\"comment\">//错误，必须初始化,c是int&amp;类型</span></span><br><span class=\"line\"><span class=\"comment\">// decltype(*p) c;</span></span><br></pre></td></tr></table></figure>","feature":null,"text":"C++的输入和输出以及常见的所有的变量和参数...","permalink":"/post/C++的输入和输出","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":7,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":8,"path":"api/tags/C.json"},{"name":"iostream","slug":"iostream","count":1,"path":"api/tags/iostream.json"},{"name":"变量和常量","slug":"变量和常量","count":1,"path":"api/tags/变量和常量.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#iostream\"><span class=\"toc-text\">iostream</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">变量的声明和定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">引用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%90%91%E6%8C%87%E9%92%88%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">指向指针的引用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%90%91%E5%B8%B8%E9%87%8F%E7%9A%84%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指向常量的指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88\"><span class=\"toc-text\">常量指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A1%B6%E5%B1%82const\"><span class=\"toc-text\">顶层const</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#constexper%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">constexper变量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8Cconstexpr\"><span class=\"toc-text\">指针和constexpr</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">类型别名</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#auto-%E6%8E%A8%E5%AF%BC\"><span class=\"toc-text\">auto 推导</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#decltype%E7%B1%BB%E5%9E%8B%E6%8C%87%E7%A4%BA%E7%AC%A6\"><span class=\"toc-text\">decltype类型指示符</span></a></li></ol>","author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"String类","uid":"d7215eab570338175fadc0dc91188274","slug":"C++的string类","date":"2021-05-03T04:15:58.000Z","updated":"2024-05-18T18:03:47.986Z","comments":true,"path":"api/articles/C++的string类.json","keywords":null,"cover":"img/C++.png","text":"介绍string类的使用...","permalink":"/post/C++的string类","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":7,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":8,"path":"api/tags/C.json"},{"name":"String类","slug":"String类","count":1,"path":"api/tags/String类.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}},"feature":null},"next_post":{"title":"Hexo文章模版","uid":"c847bfd470a979bb27b4c7fa12ad9905","slug":"Hexo文章模版","date":"2020-05-29T18:15:58.000Z","updated":"2024-05-18T18:07:29.890Z","comments":true,"path":"api/articles/Hexo文章模版.json","keywords":null,"cover":"img/web.jpg","text":"头部信息Hexo 的 Aurora 主题是一个流行的开源博客主题，提供了丰富的自定义选项来帮助用户个性化他们的博客。在编写文章时，可以通过在文章的 Front-...","permalink":"/post/Hexo文章模版","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"实用教程","slug":"实用教程","count":2,"path":"api/categories/实用教程.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"aurora","slug":"aurora","count":1,"path":"api/tags/aurora.json"}],"author":{"name":"kiyose408","slug":"blog-author","avatar":"img/kiyose.png","link":"/","description":"强风吹拂~","socials":{"github":"https://github.com/kiyose408","twitter":"","stackoverflow":"https://stackoverflow.com/users/22586365/kiyose408","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_4492248","juejin":"https://juejin.cn/user/3941068096931262","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/kiyose408"}}}}}}